{"./":{"url":"./","title":"介绍","keywords":"","body":"DeekeScript介绍 DeekeScript是什么？ DeekeScript是基于Android无障碍的自动化脚本研发平台。 案例展示 使用非DeekeScript案例：嘀客App 使用DeekeScript案例：Deeke DeekeScript优势 从“嘀客APP”到“Deeke”，我解决：稳定性极差问题、软件十分不流畅问题、软件体验极差等问题 采用JavaScript/TypeScript编写脚本，无需你懂Android 支持JSON格式定义主界面、参数设置界面等，开发者无需过多关注UI设计 支持Vscode开发与调试、代码提示 支持全平台App（不针对主流App进行限制） 个人版完全免费使用 企业版支持后台卡密管理系统（支持代理模式，可私有化部署） 支持Android8（API26）以上 总的来说，如果你想开发一款类似Deeke的产品，使用DeekeScript框架，将会提升5-10倍的开发速度。 DeekeScript适合哪些场景？ 在绝大多数需要取代人工，或者模拟人工进行的操作，都可以采用DeekeScript解决方案。比如：某音自动化获客，某信自动打招呼，抢票软件，朋友圈点赞评论软件，批量发私信打招呼软件，一些RPA软件（流程自动化软件）等等 DeekeScript展望未来 我们未来将在以下几个地方发力： APP支持各种主题定制 丰富各种Api 开发应用市场 开发者可以将开发的功能发布在应用市场获取收益 用户只需要在DeekeScript软件内，即可使用软件内的使用插件） 商家在后台即可选择应用市场的任意功能进行打包，打造自己的App（支持私有化部署） Copyright © script.deeke.top 2024 all right reserved，powered by Gitbook该文章修订时间： 2025-03-05 12:01:11 "},"demo/demo.html":{"url":"demo/demo.html","title":"案例篇","keywords":"","body":"案例篇 嘀客App 嘀客APP作为DeekeScript工具开发的经典案例之一，具有参考价值。通过案例，可以让你了解到DeekeScript能做什么，以便你能够快速地做技术选型 autojs开发的嘀客APP 嘀客App 查看项目 DeekeScript改造后的Deeke Deeke 查看项目 开发类似Deeke的APP，你需要做什么？ 如果需要快速开始，可以进入快速开始部分 电脑端下载Vscode，安装DeekeScript开发插件 拉取DeekeScript开发的基础代码 编写JavaScript或者Typescript脚本 设计几个图标（当然，也可以在iconfont.cn平台下载） 手机安装DeekeScript App软件 不断调试运行，确保代码文档、无bug 编写激活码后端Api（需要配置在DeekeScript中，便于你的打包后的App激活，不需要激活可省略） 上传开发脚本，DeekeScript后台打包成App（无需打包可省略） 如果你是企业用户（或者具备企业权限），你可能还需要以下功能： 在DeekeScript开放平台注册账号 将相关接口配置到DeekeScript开发环境中 DeekeScript后台支持贴牌代理模式，如有需要，请访问DeekeScript开放平台获取！ Copyright © script.deeke.top 2024 all right reserved，powered by Gitbook该文章修订时间： 2025-03-05 12:01:11 "},"quick/quick.html":{"url":"quick/quick.html","title":"认识DeekeScript","keywords":"","body":"快速入门 认识DeekeScript 为什么会有DeekeScript？早些年，我们团队着手开发一款基于某视频软件的引流APP。当时为了快速投入市场，团队选择了国内某知名APP开发框架，基于此开源软件打造了一款引流获客软件 — 嘀客APP。 在嘀客APP产品运作过程中，技术团队遇到了很多问题、不稳定、闪退、息屏等等。这些问题为我们开拓市场埋下了很大的隐患，甚至影响到产品的未来。 再后来，我们决定对嘀客APP进行重构，而重构必须得有自己的底层框架，否则根本问题无法解决。最终我们决定在2023年年底启动了DeekeScript项目。 历时6个多月，我们完成了DeekeScript的1.0版本，随后把原先的嘀客APP也迁移进DeekeScript了，并且更名为Deeke，Deeke的体验提升了很多，运行速度也大幅提升。不再有运行一段时间挂掉、无法识别到界面的节点等情况发生。 为什么选择DeekeScript？ DeekeScript为稳定而生，脚本在电量充足状态下，可以持续挂机，不会出现离奇的中断事件；更不会出现一段时间后无法识别APP界面节点等问题。 DeekeScript提供了全新的UI，开发者只需要关注业务开发，无需关注UI设计，只需提供功能图标和业务脚本（Typescript或者JavaScript）文件，就能立马把自己的代码打包成一个漂亮的APP应用。 结合我们这几年在创业过程中积累的经验，我们十分了解开发此类软件，程序员更需要什么。 为企业开放了“卡密系统”（包含代理功能），开发者现在，就可以快速打造一个商业项目。 大幅提升产品开发效率，原本2-3个月才能完成的事情，现在只需要1-2周即可完成。 Copyright © script.deeke.top 2024 all right reserved，powered by Gitbook该文章修订时间： 2025-03-05 12:01:11 "},"quick/envir.html":{"url":"quick/envir.html","title":"开发环境说明","keywords":"","body":"开发环境说明 Android版本支持 DeekeScript对绝大多数Android版本都提供支持，主要支持Android 8.0及以上版本（截止目前>95.4%）；对应的Android Api版本是26及以上。下图是截止日期（2025-01-10）Android的版本占比分布情况。 Android权限说明 使用DeekeScript可以获取Android的哪些权限呢？ 目前DeekeScript不限制应用获取Android权限，只要Android开放的权限，DeekeScript都会开放；DeekeScript默认支持了大多数常用权限，对于DeekeScript默认不支持的权限，可以通过自定义权限方式获取（注意此方式，需要将开发脚本打包成App）。 JavaScript支持哪些能力？ DeekeScript底层是基于Rhino引擎，Rhino是由Java开发的JavaScript引擎，因此它对JavaScript调用Java天生就很友好，因此DeekeScript后续也将逐步开放越来越多的Java对象提供给JavaScript使用。目前来看在脚本启停这块，Rhino比j2v8等基于v8框架要丝滑很多，不会出现停止脚本卡顿问题，更不会出现中断不了脚本的情况。 基础函数支持 很多同学之前可能了解浏览器环境下的JavaScript和nodejs，因此可能习惯了使用setTimeout、setInterval、console.log等方法，这些DeekeScript也都是支持的，可以放心使用这些函数。 是否支持模块化 另外关注点更多的可能是模块化部分，因为DeekeScript本身就是为了支持项目化（针对某个或者某些应用开发N个脚本）开发的工具（而不仅仅只是支持单个脚本的开发），所以对模块化支持也是很友好的，具体可以参阅模块化 异步支持 DeekeScript提供了异步支持，具体参考DeekeScript异步 是否支持多线程？ 相信富有经验的开发者，会发现很多工具都有提供多线程支持；因为很多时候，我们需要同时执行两个操作（比如，采集直播间弹幕的时候，又要实时获取在线人数）；这个时候使用多线程的方式可以更好地满足我们的需求。DeekeScript本身也是支持多线程的；因为JavaScript是不支持多线程的，实际上底层是由Java在执行，具体可以参考多线程篇。 其他支持 类似http请求，websocket都有支持，具体可以参考文档对应部分 Copyright © script.deeke.top 2024 all right reserved，powered by Gitbook该文章修订时间： 2025-03-05 12:01:11 "},"quick/start.html":{"url":"quick/start.html","title":"快速开始","keywords":"","body":"快速开始 目前DeekeScript支持JavaScript和Typescript开发（推荐）。 Typescript方式支持DeekeScript代码提示（提升编写速度） Typescript有着更加严格的类型控制（降低代码错误，增加代码可读性，降低代码维护成本） Typescript编译成JavaScript之后可以混淆代码（增加安全性） &#x1F604; 使用Typescript方式，但用JavaScript编码风格来编写代码，这样既有代码提示，又可以降低代码复杂度 接下来分别介绍JavaScript和Typescript方式如何创建项目 准备工作 下载vscode 在Vscode中安装DeekeScript开发插件，如下图，点击“安装”即可 在手机上下载安装DeekeScript软件包 打开DeekeScript的侧边栏（左上角“三条杠”），开启“无障碍”、“悬浮窗”、“开启服务” 控件查看器 节点查看器主要用于查看手机界面上的“控件”信息，使用节点信息来查找你需要的“控件”，然后对控件进行点击或者输入以及滑动等操作 打开手机端的DeekeScript，如下图，可以看到手机的局域网IP是“192.168.1.3”： 打开浏览器，输入：\"http://192.168.1.3:8080\"，可以看到下面的页面 选择左侧的控件，点击之后，就可以清楚地看到控件信息了 如果你需要看到更多的控件，可以选择“复杂模式”；有时候你可能不想打开vscode调试，你可以切换到“在线调试”进行功能调试 创建JavaScript项目 通过git获取基础代码 git clone https://github.com/DeekeScript/deekeScriptDemo.git ./ 打开Vscode代码编辑器，并且将刚刚克隆的项目打开，如下图： 同步项目到手机，让APP启动 手机中的APP已经出现了相应的界面，可以在手机中点击对应的功能进行运行，大概如下图： 创建TypeScript项目 通过git获取基础代码 git clone https://github.com/DeekeScript/DeekeScript ./ 打开Vscode代码编辑器，并且将刚刚克隆的项目打开，如下图： 在当前文件夹下执行： # 如果电脑没有安装nodejs，还需要安装nodejs # 如果执行下面的代码卡顿，注意将npm镜像设置为阿里云镜像 npm install 编写Typescript代码 编译Typescript代码，如下图： 同步项目到手机，让APP启动 手机中的APP已经出现了相应的界面，可以在手机中点击对应的功能进行运行，大概如下图： 单个JavaScript或者Typescript调试 我不想创建项目，只想创建一个js或者ts文件，直接运行可以么？ 这样是可以的，目前DeekeScript只支持项目运行，vscode可以调试单个文件，操作如下： 创建一个js文件，如：test.js 点击右上角的“执行”图标即可 如果是Typescript，则需要先执行编译动作，然后再进入项目的script文件夹下面的对应js文件下，执行上面的操作即可！ Copyright © script.deeke.top 2024 all right reserved，powered by Gitbook该文章修订时间： 2025-03-10 10:14:30 "},"config/config.html":{"url":"config/config.html","title":"DeekeScript.json","keywords":"","body":"配置 deekeScript.json文件说明 示例请查看本页末尾部分 主体参数 参数名 类型 必填 示例 说明 name String 是 Deeke App安装成功之后，在手机上的名称 icon String 是 logo/dke.png 图标建议采用200*200像素的，清晰度大的 head String 是 img/root.png App中用户设置页面的头像，无设置页可以不填 settingTopBg String 是 img/sett-top.png App中用户设置页面的背景图，可以不设置，但是建议设置 host String 是 https://xx.xxx.xxx 接口请求域名 switchSetting Json 是 switchSetting参数 功能开关设置 groups Json 是 groups参数 主界面的功能组，每组都会包含若干个功能 bottomMenus Json 是 bottomMenus参数 App中底部菜单，可以使用系统内置的，也可以自定义 settingLists Json 是 settingLists参数 App中设置页的列表项，可以使用系统内置的，也可以自定义 apis Json 是 apis参数 设置相关api，比如激活码api，验证激活码是否有效api登 switchSetting参数 参数名 类型 必填 示例 说明 alipay Boolean 是 true 支持支付宝支付 groups参数 参数名 类型 必填 示例 说明 title String 是 XX截流 App主界面的功能名称 titleHidden String 否 false App主界面功能组标题是否隐藏，默认不隐藏 hidden Boolean 否 false 功能实际执行的代码所在文件 methods Json 是 methods参数 功能对应的设置页面，如果为空，则直接执行jsFile脚本 methods参数 参数名 类型 必填 示例 说明 title String 是 XX截流 App主界面的功能名称 icon String 是 logo/fans.png App主界面的功能图标 jsFile String 是 tasks/task_dy_toker_fans.js 功能实际执行的代码所在文件 settingPage Json 是 settingPage参数 功能对应的设置页面，如果为空，则直接执行jsFile脚本 hidden boolean 否 true 属性值，当为true的时候，则界面上不再显示此功能模块 settingPage参数 参数名 类型 必填 示例 说明 params Json 是 params参数 需要用户设置的参数 params参数 参数名 类型 必填 示例 说明 type String 是 text Form参数类型，有text、textArea、select、checkboxGroup、checkbox、radio、switch、number、numberRange、digitRange、digit label String 是 用户账号 字段描述，控件的描述，用于告诉用户这个控件输入的内容 value any 是 miniphper 初始值，可以为空 ; number/numberRange/digitRange/digit的时候，value为数字类型，text/textArea为字符串类型 name String 是 account 控件名称，后续获取值的时候，需要这个参数名称 min int 否 0 最小值，当type为numberRange或者digitRange时必须 max int 否 1000 最大值，当type为numberRange或者digitRange时必须 step int 否 1 滑动最小单位，当type为numberRange或者digitRange时必须 options Json 否 options参数 属性值，当type为select、checkbox、radio时必须 hidden boolean 否 true 属性值，当为true的时候，则界面上不再显示此字段；默认为false columnCount array 否 true 每行展示Checkbox数量，当type为checkboxGroup时必须 children array 否 true CheckboxsGroup里面的Checkbox所有值，当type为checkboxGroup时必须 options参数 参数名 类型 示例 说明 selected bool false 是否默认选中 lable String 男 描述，用于告诉用户这个控件的内容 value String 1 值 bottomMenus参数 参数名 类型 必填 示例 说明 title String 是 首页，如果想和name参数保持一致，可以使用\"{NAME}\" 底部菜单名称名称 icon String 是 logo/fans.png 底部菜单图标 banner String 否 banner/banner.png type为home的时候必填，表示首页顶部图片 type String 否 home 目前支持home、setting、speech，分别表示首页、设置页、话术页 settingLists参数 参数名 类型 必填 示例 说明 title String 是 清理缓存 设置页标题名称 icon String 是 logo/clear.png 底部菜单图标 url String 否 /dke/uploadLog type为uploadLog的时候必须，用于接受上传日志；type为updateApp的时候必须，用于下载apk type String 是 clear 支持clear、uploadLog、customerService、updateApp、custom，分别表示 清理缓存、上传日志、联系客服、更新App、自定义 jsFile String 否 statistics/statistics.js type为statistics时候必须，用于统计数据 description String 否 确定清理吗？ type为clear的时候，会弹出提示框，确认后执行清理；type为customerService可以设置为“客服微信：miniphper” file String 否 task.html type为notice的时候必须 hidden Boolean 否 false 默认为false settingPage Json 否 settingPage参数，注意当前仅支持text和notice表单 type为qiwei的时候，需要设置，用于往企微机器人表单收集（或者举报） apis参数 关于每个接口的使用说明，请参考后端接口 参数名 类型 必填 示例 说明 url String 是 /dke/login 接口地址，type为bind，则为激活码激活地址；type为checkBind，则为激活码验证地址；type为aiSpeechToken表示获取百度AI大模型的token；type为config表示初始化接口；type为getToken表示获取支付宝支付token；type为createOrder表示支付宝下单接口 type String 是 bind 目前支持bind、checkBind，bind为首次激活，checkBind用于每次运行功能时执行检查，状态不对则无法运行功能，并会给出提示 deekeScript.json文件内容 { \"name\": \"Deeke\", \"icon\": \"logo/dke.png\", \"head\": \"img/robot.png\", \"settingTopBg\": \"img/setting-top.png\", \"host\": \"https://home.deeke.top\", \"switchSetting\": { \"alipay\": true }, \"groups\": [ { \"title\": \"DY·万能引流\", \"titleHidden\": false, \"hidden\": false, \"methods\": [ { \"title\": \"推荐营销\", \"icon\": \"img/finger.png\", \"jsFile\": \"tasks/task_dy_toker.js\", \"settingPage\": { \"params\": [ { \"type\": \"numberRange\", \"label\": \"观看时长（秒）\", \"name\": \"toker_view_video_second\", \"max\": 60, \"min\": 5, \"value\": 12, \"step\": 1 }, { \"type\": \"textArea\", \"label\": \"关键词筛选（多个使用逗号隔开）\", \"name\": \"toker_view_video_keywords\", \"value\": \"\", \"notice\": \"* 关键词不填则操作所有\" }, { \"type\": \"numberRange\", \"label\": \"点赞频率（%）\", \"name\": \"toker_zan_rate\", \"max\": 100, \"min\": 0, \"step\": 1, \"value\": 100 }, { \"type\": \"numberRange\", \"label\": \"评论频率（%）\", \"name\": \"toker_comment_rate\", \"max\": 100, \"min\": 0, \"step\": 1, \"value\": 100 }, { \"type\": \"numberRange\", \"label\": \"关注频率（%）\", \"name\": \"toker_focus_rate\", \"max\": 100, \"min\": 0, \"step\": 1, \"value\": 1 }, { \"type\": \"numberRange\", \"label\": \"私信频率（%）\", \"name\": \"toker_private_msg_rate\", \"max\": 100, \"min\": 0, \"step\": 1, \"value\": 1 }, { \"type\": \"numberRange\", \"label\": \"评论区五连赞频率（%）\", \"name\": \"toker_comment_area_zan_rate\", \"max\": 100, \"min\": 0, \"step\": 1, \"value\": 100 }, { \"type\": \"checkboxGroup\", \"label\": \"性别\", \"name\": \"toker_run_sex\", \"columnCount\": 6, \"children\": [ \"女\", \"男\", \"未知\" ], \"values\": [ \"0\", \"1\", \"2\" ] }, { \"type\": \"numberRange\", \"label\": \"最小年龄\", \"name\": \"toker_run_min_age\", \"max\": 100, \"min\": 0, \"step\": 1, \"value\": 0 }, { \"type\": \"numberRange\", \"label\": \"最大年龄\", \"name\": \"toker_run_max_age\", \"max\": 100, \"min\": 0, \"step\": 1, \"value\": 60 }, { \"type\": \"checkboxGroup\", \"label\": \"运行时间\", \"name\": \"toker_run_hour\", \"columnCount\": 6, \"children\": [ \"0时\", \"1时\", \"2时\", \"3时\", \"4时\", \"5时\", \"6时\", \"7时\", \"8时\", \"9时\", \"10时\", \"11时\", \"12时\", \"13时\", \"14时\", \"15时\", \"16时\", \"17时\", \"18时\", \"19时\", \"20时\", \"21时\", \"22时\", \"23时\" ], \"values\": [ \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\" ] } ] } }, { \"title\": \"同城营销\", \"icon\": \"img/city.png\", \"jsFile\": \"tasks/task_dy_toker_city.js\", \"settingPage\": { \"params\": [ { \"type\": \"numberRange\", \"label\": \"观看时长（秒）\", \"name\": \"toker_city_view_video_second\", \"max\": 30, \"min\": 5, \"value\": 12, \"step\": 1 }, { \"type\": \"textArea\", \"label\": \"关键词筛选（多个使用逗号隔开）\", \"name\": \"toker_city_view_video_keywords\", \"value\": \"\", \"notice\": \"* 关键词不填则操作所有\" }, { \"type\": \"numberRange\", \"label\": \"点赞频率（%）\", \"name\": \"toker_city_zan_rate\", \"max\": 100, \"min\": 0, \"step\": 1, \"value\": 100 }, { \"type\": \"numberRange\", \"label\": \"评论频率（%）\", \"name\": \"toker_city_comment_rate\", \"max\": 100, \"min\": 0, \"step\": 1, \"value\": 100 }, { \"type\": \"numberRange\", \"label\": \"关注频率（%）\", \"name\": \"toker_city_focus_rate\", \"max\": 100, \"min\": 0, \"step\": 1, \"value\": 1 }, { \"type\": \"numberRange\", \"label\": \"私信频率（%）\", \"name\": \"toker_city_private_msg_rate\", \"max\": 100, \"min\": 0, \"step\": 1, \"value\": 1 }, { \"type\": \"numberRange\", \"label\": \"评论区五连赞频率（%）\", \"name\": \"toker_city_comment_area_zan_rate\", \"max\": 100, \"min\": 0, \"step\": 1, \"value\": 100 }, { \"type\": \"numberRange\", \"label\": \"同城距离（公里内）\", \"name\": \"toker_city_distance\", \"max\": 100, \"min\": 1, \"step\": 1, \"value\": 100 }, { \"type\": \"checkboxGroup\", \"label\": \"性别\", \"name\": \"toker_city_run_sex\", \"columnCount\": 6, \"children\": [ \"女\", \"男\", \"未知\" ], \"values\": [ \"0\", \"1\", \"2\" ] }, { \"type\": \"numberRange\", \"label\": \"最小年龄\", \"name\": \"toker_city_run_min_age\", \"max\": 100, \"min\": 0, \"step\": 1, \"value\": 0 }, { \"type\": \"numberRange\", \"label\": \"最大年龄\", \"name\": \"toker_city_run_max_age\", \"max\": 100, \"min\": 0, \"step\": 1, \"value\": 100 }, { \"type\": \"checkboxGroup\", \"label\": \"运行时间\", \"name\": \"toker_city_run_hour\", \"columnCount\": 6, \"children\": [ \"0时\", \"1时\", \"2时\", \"3时\", \"4时\", \"5时\", \"6时\", \"7时\", \"8时\", \"9时\", \"10时\", \"11时\", \"12时\", \"13时\", \"14时\", \"15时\", \"16时\", \"17时\", \"18时\", \"19时\", \"20时\", \"21时\", \"22时\", \"23时\" ], \"values\": [ \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\" ] } ] } }, { \"title\": \"工具箱\", \"hidden\": false, \"icon\": \"img/tool.png\", \"jsFile\": \"tasks/tool.js\", \"activity\": { \"notice\": \"暂无功能~\", \"title\": \"工具箱\", \"minVersion\": 10001, \"groups\": [ { \"title\": \"工具箱\", \"titleHidden\": true, \"methods\": [ { \"title\": \"一键取赞\", \"hidden\": false, \"icon\": \"img/cancel_zan.png\", \"jsFile\": \"tasks/task_dy_cancel_zan.js\", \"settingPage\": { \"params\": [ { \"type\": \"notice\", \"title\": \"帮助你快速取消视频点赞~\" } ] } }, { \"title\": \"一键取关\", \"hidden\": false, \"icon\": \"img/cancel_focus.png\", \"jsFile\": \"tasks/task_dy_cancel_focus.js\", \"settingPage\": { \"params\": [ { \"type\": \"notice\", \"title\": \"帮助你快速取消单向关注（你关注他，他没有关注你）的用户~\" }, { \"type\": \"switch\", \"label\": \"互相关注取关\", \"name\": \"task_dy_cancel_focus_mutual_switch\" } ] } }, { \"title\": \"粉丝回访\", \"hidden\": false, \"icon\": \"img/view_back.png\", \"jsFile\": \"tasks/task_dy_fans_back_view.js\", \"settingPage\": { \"params\": [ { \"type\": \"notice\", \"title\": \"粉丝回访，能增加粉丝粘性~\" } ] } } ] } ] } } ] }, { \"title\": \"DY·同行截流\", \"methods\": [ { \"title\": \"粉丝截流\", \"icon\": \"img/fans.png\", \"jsFile\": \"tasks/task_dy_toker_fans.js\", \"settingPage\": { \"params\": [ { \"type\": \"numberRange\", \"label\": \"私信频率（%）\", \"name\": \"fansSetting_privateRate\", \"max\": 100, \"min\": 0, \"step\": 1 }, { \"type\": \"numberRange\", \"label\": \"关注频率（%）\", \"name\": \"fansSetting_focusRate\", \"max\": 100, \"min\": 0, \"step\": 1 }, { \"type\": \"numberRange\", \"label\": \"点赞频率（%）\", \"name\": \"fansSetting_zanRate\", \"max\": 100, \"min\": 0, \"step\": 1 }, { \"type\": \"numberRange\", \"label\": \"评论频率（%）\", \"name\": \"fansSetting_commentRate\", \"max\": 100, \"min\": 0, \"step\": 1 }, { \"type\": \"digit\", \"label\": \"粉丝数（不低于）\", \"name\": \"fansSetting_fansMinCount\", \"value\": 0 }, { \"type\": \"digit\", \"label\": \"粉丝数（不超过）\", \"name\": \"fansSetting_fansMaxCount\", \"value\": 10000 }, { \"type\": \"digit\", \"label\": \"作品数（不低于）\", \"name\": \"fansSetting_worksMinCount\", \"value\": 0 }, { \"type\": \"digit\", \"label\": \"作品数（不超过）\", \"name\": \"fansSetting_worksMaxCount\", \"value\": 10000 }, { \"type\": \"number\", \"label\": \"操作次数\", \"name\": \"fansSetting_opCount\", \"value\": 100 }, { \"type\": \"text\", \"label\": \"操作账号\", \"name\": \"fansSetting_account\", \"value\": \"\", \"notice\": \"*可以输入UID，需要在UID前面加上“#”\" } ] } }, { \"title\": \"关注截流\", \"icon\": \"img/anchor_focus.png\", \"jsFile\": \"tasks/task_dy_toker_focus.js\", \"hidden\": false, \"settingPage\": { \"params\": [ { \"type\": \"numberRange\", \"label\": \"私信频率（%）\", \"name\": \"focusSetting_privateRate\", \"max\": 100, \"min\": 0, \"step\": 1 }, { \"type\": \"numberRange\", \"label\": \"关注频率（%）\", \"name\": \"focusSetting_focusRate\", \"max\": 100, \"min\": 0, \"step\": 1 }, { \"type\": \"numberRange\", \"label\": \"点赞频率（%）\", \"name\": \"focusSetting_zanRate\", \"max\": 100, \"min\": 0, \"step\": 1 }, { \"type\": \"numberRange\", \"label\": \"评论频率（%）\", \"name\": \"focusSetting_commentRate\", \"max\": 100, \"min\": 0, \"step\": 1 }, { \"type\": \"digit\", \"label\": \"粉丝数（不低于）\", \"name\": \"focusSetting_fansMinCount\", \"value\": 0 }, { \"type\": \"digit\", \"label\": \"粉丝数（不超过）\", \"name\": \"focusSetting_fansMaxCount\", \"value\": 10000 }, { \"type\": \"digit\", \"label\": \"作品数（不低于）\", \"name\": \"focusSetting_worksMinCount\", \"value\": 0 }, { \"type\": \"digit\", \"label\": \"作品数（不超过）\", \"name\": \"focusSetting_worksMaxCount\", \"value\": 10000 }, { \"type\": \"number\", \"label\": \"操作次数\", \"name\": \"focusSetting_opCount\", \"value\": 100 }, { \"type\": \"text\", \"label\": \"操作账号\", \"name\": \"focusSetting_account\", \"value\": \"\", \"notice\": \"*可以输入UID，需要在UID前面加上“#”\" } ] } }, { \"title\": \"评论区截流\", \"hidden\": false, \"icon\": \"img/speech-say.png\", \"jsFile\": \"tasks/task_dy_toker_comment.js\", \"settingPage\": { \"params\": [ { \"type\": \"textArea\", \"label\": \"输入账号（多账号使用逗号隔开）\", \"name\": \"task_dy_toker_comment_account\", \"value\": \"\", \"notice\": \"*可以输入UID，需要在输入框前面加上“#”\" }, { \"type\": \"textArea\", \"label\": \"评论关键词（多关键词使用逗号隔开）\", \"name\": \"task_dy_toker_comment_kw\", \"value\": \"\" }, { \"type\": \"numberRange\", \"label\": \"每轮休息时间（秒）\", \"name\": \"task_dy_toker_comment_sleep_second\", \"value\": 600, \"max\": 3600, \"min\": 0, \"step\": 1 } ] } }, { \"title\": \"直播间截流\", \"hidden\": false, \"icon\": \"img/live.png\", \"jsFile\": \"tasks/task_dy_toker_live.js\", \"settingPage\": { \"params\": [ { \"type\": \"textArea\", \"label\": \"输入账号（正在直播）\", \"value\": \"\", \"name\": \"task_dy_toker_live_account\", \"notice\": \"*可以输入UID，需要在UID前面加上“#”\" }, { \"type\": \"numberRange\", \"label\": \"前多少名不操作\", \"name\": \"task_dy_toker_live_index\", \"value\": 5, \"max\": 100, \"min\": 0, \"step\": 1 }, { \"type\": \"numberRange\", \"label\": \"点赞/评论视频概率\", \"name\": \"task_dy_toker_live_comment_user_video_rate\", \"value\": 0, \"max\": 100, \"min\": 0, \"step\": 1 }, { \"type\": \"switch\", \"label\": \"直播间关注用户\", \"name\": \"task_dy_toker_live_focus_switch\" }, { \"type\": \"switch\", \"label\": \"直播间私信用户\", \"name\": \"task_dy_toker_live_private_switch\" }, { \"type\": \"numberRange\", \"label\": \"用户操作间隔（秒）\", \"name\": \"task_dy_toker_live_focus_rate\", \"value\": 0, \"max\": 100, \"min\": 5, \"step\": 5 } ] } }, { \"title\": \"粉丝群截流\", \"hidden\": false, \"icon\": \"img/tuandui.png\", \"jsFile\": \"tasks/task_dy_fans_group.js\", \"settingPage\": { \"params\": [ { \"type\": \"textArea\", \"label\": \"群名称|群主账号、昵称（支持模糊搜索）\", \"value\": \"\", \"name\": \"task_dy_fans_group\" }, { \"type\": \"numberRange\", \"label\": \"搜索结果的第几个群\", \"name\": \"task_dy_fans_group_index\", \"value\": 1, \"max\": 8, \"min\": 1, \"step\": 1 } ] } }, { \"title\": \"智能询盘\", \"hidden\": false, \"icon\": \"img/user-get.png\", \"jsFile\": \"tasks/task_dy_search_inquiry.js\", \"settingPage\": { \"params\": [ { \"type\": \"textArea\", \"label\": \"询盘关键词\", \"value\": \"\", \"name\": \"task_dy_search_inquiry\" }, { \"type\": \"textArea\", \"label\": \"触发关键词（多个使用逗号隔开）\", \"name\": \"task_dy_search_inquiry_kws\", \"value\": \"\" }, { \"type\": \"numberRange\", \"label\": \"刷视频数量\", \"name\": \"task_dy_search_inquiry_count\", \"value\": 10, \"max\": 1000, \"min\": 1, \"step\": 1 } ] } } ] }, { \"title\": \"DY·养号涨粉\", \"methods\": [ { \"title\": \"垂直养号\", \"hidden\": false, \"icon\": \"img/vertical.png\", \"jsFile\": \"tasks/task_dy_search_vertical.js\", \"settingPage\": { \"params\": [ { \"type\": \"textArea\", \"label\": \"关键词\", \"value\": \"\", \"name\": \"task_dy_search_vertical\" }, { \"type\": \"numberRange\", \"label\": \"点赞概率\", \"name\": \"task_dy_search_zan_rate\", \"value\": 10, \"max\": 100, \"min\": 0, \"step\": 1 }, { \"type\": \"numberRange\", \"label\": \"评论概率\", \"name\": \"task_dy_search_comment_rate\", \"value\": 10, \"max\": 100, \"min\": 0, \"step\": 1 }, { \"type\": \"numberRange\", \"label\": \"关注概率\", \"name\": \"task_dy_search_focus_rate\", \"value\": 10, \"max\": 100, \"min\": 0, \"step\": 1 }, { \"type\": \"numberRange\", \"label\": \"刷视频数量\", \"name\": \"task_dy_search_count\", \"value\": 10, \"max\": 5000, \"min\": 10, \"step\": 10 } ] } }, { \"title\": \"快速涨粉\", \"icon\": \"img/fans-inc.png\", \"jsFile\": \"tasks/task_dy_fans_inc_main.js\", \"settingPage\": { \"params\": [ { \"type\": \"text\", \"label\": \"输入账号（多账号每行输入一个）\", \"name\": \"task_dy_fans_inc_accounts\", \"value\": \"\", \"lines\": 5, \"hidden\": false, \"notice\": \"*可以输入UID，需要在输入框前面加上“#”\" }, { \"type\": \"notice\", \"title\": \"视频赞概率+评论赞概率+收藏概率=100%\", \"hidden\": true }, { \"type\": \"numberRange\", \"label\": \"视频赞频率（%）\", \"name\": \"task_dy_fans_inc_video_zan_rate\", \"value\": 5, \"max\": 100, \"min\": 0, \"step\": 1 }, { \"type\": \"numberRange\", \"label\": \"评论频率（%）\", \"name\": \"task_dy_fans_inc_comment_rate\", \"value\": 5, \"max\": 100, \"min\": 0, \"step\": 1 }, { \"type\": \"numberRange\", \"label\": \"收藏频率（%）\", \"name\": \"task_dy_fans_inc_collection_rate\", \"value\": 5, \"max\": 100, \"min\": 0, \"step\": 1 }, { \"type\": \"numberRange\", \"label\": \"主页停留时长（秒）\", \"name\": \"task_dy_fans_inc_user_page_wait\", \"value\": 5, \"max\": 100, \"min\": 0, \"step\": 1 }, { \"type\": \"numberRange\", \"label\": \"视频停留时长（秒）\", \"name\": \"task_dy_fans_inc_user_video_wait\", \"value\": 5, \"max\": 100, \"min\": 0, \"step\": 1 } ] } }, { \"title\": \"喜欢截流\", \"hidden\": false, \"icon\": \"img/precise-user.png\", \"jsFile\": \"tasks/task_dy_consum_user.js\", \"settingPage\": { \"params\": [ { \"type\": \"textArea\", \"label\": \"对方账号\", \"value\": \"\", \"name\": \"task_dy_consum_account\" }, { \"type\": \"numberRange\", \"label\": \"操作视频数\", \"name\": \"task_dy_consum_account_videoCount\", \"value\": 10, \"max\": 5000, \"min\": 10, \"step\": 10 } ] } } ] }, { \"title\": \"DY·精准拓客\", \"methods\": [ { \"title\": \"轻松拓客\", \"icon\": \"img/qingsong.png\", \"jsFile\": \"tasks/task_dy_qingsong_tuoke.js\", \"runType\": \"floatSwitch\", \"autoOpen\": true, \"packageName\": \"com.ss.android.ugc.aweme\", \"settingPage\": { \"params\": [ { \"type\": \"numberRange\", \"label\": \"运行次数\", \"name\": \"task_dy_qingsong_tuoke_run_count\", \"value\": 10, \"max\": 1000, \"min\": 1 }, { \"type\": \"numberRange\", \"label\": \"操作平均间隔（秒）\", \"name\": \"task_dy_qingsong_tuoke_interval\", \"value\": 5, \"max\": 100, \"min\": 1, \"step\": 1 }, { \"type\": \"numberRange\", \"label\": \"主页平均停留时间（秒）\", \"name\": \"task_dy_qingsong_tuoke_home_wait\", \"value\": 5, \"max\": 100, \"min\": 1, \"hidden\": true, \"step\": 1 }, { \"type\": \"numberRange\", \"label\": \"作品平均停留时间（秒）\", \"name\": \"task_dy_qingsong_tuoke_work_wait\", \"value\": 5, \"max\": 100, \"min\": 2, \"hidden\": true, \"step\": 1 }, { \"type\": \"number\", \"label\": \"粉丝数量不少于\", \"name\": \"task_dy_qingsong_tuoke_min_fans\", \"value\": 0, \"hidden\": true }, { \"type\": \"number\", \"label\": \"粉丝数量不大于\", \"name\": \"task_dy_qingsong_tuoke_max_fans\", \"value\": 10000, \"hidden\": true }, { \"type\": \"number\", \"label\": \"作品数大于\", \"name\": \"task_dy_qingsong_tuoke_min_work\", \"value\": 1, \"hidden\": true }, { \"type\": \"checkboxGroup\", \"label\": \"功能\", \"name\": \"task_dy_qingsong_tuoke_op\", \"columnCount\": 6, \"children\": [ \"关注\", \"私信\", \"首作品点赞\" ], \"values\": [ \"0\", \"2\" ], \"hidden\": true }, { \"type\": \"checkboxGroup\", \"label\": \"私信模式\", \"name\": \"task_dy_qingsong_tuoke_private_type\", \"children\": [ \"对普通用户私信\", \"对蓝V用户私信\" ], \"values\": [], \"hidden\": true }, { \"type\": \"notice\", \"title\": \"功能说明：在其他账号的 “粉丝” 或者 “关注” 界面运行，系统会对用户首作品点赞。\" } ] } }, { \"title\": \"赞回访\", \"icon\": \"img/zan.png\", \"jsFile\": \"tasks/task_dy_zan_back.js\", \"runType\": \"floatSwitch\", \"autoOpen\": true, \"packageName\": \"com.ss.android.ugc.aweme\", \"settingPage\": { \"params\": [ { \"type\": \"numberRange\", \"label\": \"运行次数\", \"name\": \"task_dy_zan_back_run_count\", \"value\": 10, \"max\": 300, \"min\": 1 }, { \"type\": \"numberRange\", \"label\": \"操作平均间隔（秒）\", \"name\": \"task_dy_zan_back_interval\", \"value\": 5, \"max\": 100, \"min\": 1, \"step\": 1 }, { \"type\": \"numberRange\", \"label\": \"主页平均停留时间（秒）\", \"name\": \"task_dy_zan_back_home_wait\", \"value\": 5, \"max\": 100, \"min\": 1, \"step\": 1, \"hidden\": true }, { \"type\": \"numberRange\", \"label\": \"作品平均停留时间（秒）\", \"name\": \"task_dy_zan_back_work_wait\", \"value\": 5, \"max\": 100, \"min\": 2, \"step\": 1, \"hidden\": true }, { \"type\": \"number\", \"label\": \"粉丝数量不少于\", \"name\": \"task_dy_zan_back_min_fans\", \"value\": 0, \"hidden\": true }, { \"type\": \"number\", \"label\": \"粉丝数量不大于\", \"name\": \"task_dy_zan_back_max_fans\", \"value\": 10000, \"hidden\": true }, { \"type\": \"number\", \"label\": \"作品数大于\", \"name\": \"task_dy_zan_back_min_work\", \"value\": 1, \"hidden\": true }, { \"type\": \"checkboxGroup\", \"label\": \"功能\", \"name\": \"task_dy_zan_back_op\", \"columnCount\": 6, \"children\": [ \"关注\", \"私信\", \"首作品点赞\" ], \"values\": [ \"0\", \"2\" ] }, { \"type\": \"notice\", \"title\": \"功能说明：在我的 “作品” -> “评论” 页的 “点赞” 列表界面运行，对列表用户的作品回赞。\" } ] } }, { \"title\": \"好友转化\", \"icon\": \"img/friend.png\", \"jsFile\": \"tasks/task_dy_friend_change.js\", \"runType\": \"floatSwitch\", \"autoOpen\": true, \"packageName\": \"com.ss.android.ugc.aweme\", \"settingPage\": { \"params\": [ { \"type\": \"numberRange\", \"label\": \"运行次数\", \"name\": \"task_dy_friend_change_run_count\", \"value\": 10, \"max\": 300, \"min\": 1 }, { \"type\": \"numberRange\", \"label\": \"操作平均间隔（秒）\", \"name\": \"task_dy_friend_change_interval\", \"value\": 5, \"max\": 100, \"min\": 1, \"step\": 1 }, { \"type\": \"numberRange\", \"label\": \"主页平均停留时间（秒）\", \"name\": \"task_dy_friend_change_home_wait\", \"value\": 5, \"max\": 100, \"min\": 1, \"step\": 1 }, { \"type\": \"numberRange\", \"label\": \"作品平均停留时间（秒）\", \"name\": \"task_dy_friend_change_work_wait\", \"value\": 5, \"max\": 100, \"min\": 2, \"step\": 1 }, { \"type\": \"number\", \"label\": \"粉丝数量不少于\", \"name\": \"task_dy_friend_change_min_fans\", \"value\": 0 }, { \"type\": \"number\", \"label\": \"粉丝数量不大于\", \"name\": \"task_dy_friend_change_max_fans\", \"value\": 10000 }, { \"type\": \"number\", \"label\": \"作品数大于\", \"name\": \"task_dy_friend_change_min_work\", \"value\": 1 }, { \"type\": \"checkboxGroup\", \"label\": \"功能\", \"name\": \"task_dy_friend_change_op\", \"columnCount\": 6, \"children\": [ \"关注\", \"私信\", \"首作品点赞\" ], \"values\": [ \"0\", \"2\" ] }, { \"type\": \"checkboxGroup\", \"label\": \"私信模式\", \"name\": \"task_dy_friend_change_private_type\", \"children\": [ \"对普通用户私信\", \"对蓝V用户私信\" ], \"values\": [] }, { \"type\": \"notice\", \"title\": \"功能说明：在其他账号的 “粉丝” 或者 “关注” 界面运行，系统会根据相关筛选条件执行相应的任务。（适用于寻找客户，对同行的精准粉丝进行推广引流）\" } ] } } ] }, { \"title\": \"DY·UID拓客\", \"methods\": [ { \"title\": \"UID私信\", \"columns\": 16, \"icon\": \"img/private-2.png\", \"jsFile\": \"tasks/task_dy_toker_uid.js\", \"settingPage\": { \"params\": [ { \"type\": \"text\", \"label\": \"UID（每行一个）\", \"name\": \"task_dy_toker_uid_account\", \"value\": \"\", \"lines\": 5 }, { \"type\": \"numberRange\", \"label\": \"操作平均间隔（秒）\", \"name\": \"task_dy_toker_uid_interval\", \"value\": 5, \"max\": 100, \"min\": 1, \"step\": 1 }, { \"type\": \"checkboxGroup\", \"label\": \"功能\", \"name\": \"task_dy_toker_uid_op\", \"columnCount\": 6, \"children\": [ \"关注\", \"私信\" ], \"values\": [ \"0\", \"1\" ] }, { \"type\": \"notice\", \"title\": \"请确保后台弹窗权限已打开\" } ] } }, { \"title\": \"UID邀约\", \"icon\": \"img/invite.png\", \"jsFile\": \"tasks/task_dy_toker_invite.js\", \"packageName\": \"com.ss.android.ugc.aweme\", \"settingPage\": { \"params\": [ { \"type\": \"text\", \"label\": \"UID（每行一个）\", \"name\": \"task_dy_toker_invite_account\", \"value\": \"\", \"lines\": 5 }, { \"type\": \"numberRange\", \"label\": \"操作平均间隔（秒）\", \"name\": \"task_dy_toker_invite_interval\", \"value\": 5, \"max\": 100, \"min\": 1, \"step\": 1 }, { \"type\": \"notice\", \"title\": \"功能说明：蓝V账号，需要创建卡片，这个功能将会自动分享第一个卡片\" } ] } } ] }, { \"title\": \"DY·其他功能\", \"methods\": [ { \"title\": \"精准行业\", \"hidden\": false, \"icon\": \"img/rocket.png\", \"jsFile\": \"tasks/task_dy_search_user.js\", \"columns\": 16, \"settingPage\": { \"params\": [ { \"type\": \"numberRange\", \"label\": \"私信频率（%）\", \"name\": \"searchUserSetting_privateRate\", \"max\": 100, \"min\": 0, \"value\": 0, \"step\": 1 }, { \"type\": \"numberRange\", \"label\": \"关注频率（%）\", \"name\": \"searchUserSetting_focusRate\", \"max\": 100, \"min\": 0, \"value\": 0, \"step\": 1 }, { \"type\": \"numberRange\", \"label\": \"点赞频率（%）\", \"name\": \"searchUserSetting_zanRate\", \"max\": 100, \"value\": 40, \"min\": 0, \"step\": 1 }, { \"type\": \"numberRange\", \"label\": \"评论频率（%）\", \"name\": \"searchUserSetting_commentRate\", \"max\": 100, \"value\": 25, \"min\": 0, \"step\": 1 }, { \"type\": \"digit\", \"label\": \"粉丝数（不低于）\", \"name\": \"searchUserSetting_fansMinCount\", \"value\": 0 }, { \"type\": \"digit\", \"label\": \"粉丝数（不超过）\", \"name\": \"searchUserSetting_fansMaxCount\", \"value\": 50000 }, { \"type\": \"digit\", \"label\": \"作品数（不低于）\", \"name\": \"searchUserSetting_worksMinCount\", \"value\": 0 }, { \"type\": \"digit\", \"label\": \"作品数（不超过）\", \"name\": \"searchUserSetting_worksMaxCount\", \"value\": 10000 }, { \"type\": \"number\", \"label\": \"操作次数\", \"name\": \"searchUserSetting_opCount\", \"value\": 2000 }, { \"type\": \"text\", \"label\": \"行业关键词\", \"name\": \"searchUserSetting_keyword\", \"value\": \"\" } ] } }, { \"title\": \"团购营销\", \"hidden\": false, \"columns\": 8, \"icon\": \"img/team-buy.png\", \"jsFile\": \"tasks/task_dy_team_buy.js\", \"minVersion\": 10001, \"settingPage\": { \"params\": [ { \"type\": \"notice\", \"title\": \"1.团购功能可能需要多次授权位置服务，请先手动操作一遍流程，再使用软件运行~\\n\\n2.每次启动该功能，请确保DY界面在首页或者团购页~\\n\\n3.确保用户列表可以被操作\" }, { \"type\": \"textArea\", \"label\": \"门店名称\", \"name\": \"task_dy_team_buy_text\", \"value\": \"\" }, { \"type\": \"textArea\", \"label\": \"操作次数\", \"name\": \"task_dy_team_buy_op_count\", \"value\": \"10\" }, { \"type\": \"numberRange\", \"label\": \"赞频率（%）\", \"name\": \"task_dy_team_buy_zan_rate\", \"max\": 100, \"value\": 50, \"min\": 0, \"step\": 1 }, { \"type\": \"numberRange\", \"label\": \"评论频率（%）\", \"name\": \"task_dy_team_buy_comment_rate\", \"max\": 100, \"value\": 50, \"min\": 0, \"step\": 1 }, { \"type\": \"numberRange\", \"label\": \"私信频率（%）\", \"name\": \"task_dy_team_buy_private_rate\", \"max\": 100, \"value\": 50, \"min\": 0, \"step\": 1 }, { \"type\": \"numberRange\", \"label\": \"操作间隔\", \"name\": \"task_dy_team_buy_wait\", \"max\": 100, \"value\": 5, \"min\": 0, \"step\": 1 }, { \"type\": \"numberRange\", \"label\": \"滑动灵敏度\", \"name\": \"task_dy_team_buy_swipe\", \"max\": 100, \"value\": 50, \"min\": 20, \"step\": 1 } ] } }, { \"title\": \"直播间弹幕\", \"hidden\": false, \"icon\": \"img/barrage.png\", \"jsFile\": \"tasks/task_dy_live_barrage.js\", \"columns\": 16, \"settingPage\": { \"params\": [ { \"type\": \"textArea\", \"label\": \"输入账号（正在直播中）\", \"name\": \"task_dy_live_barrage_account\", \"value\": \"\", \"notice\": \"*可以输入UID，需要在UID前面加上“#”\" }, { \"type\": \"numberRange\", \"label\": \"操作最大间隔时间（秒）\", \"name\": \"task_dy_live_barrage_second\", \"value\": 5, \"max\": 300, \"min\": 5, \"step\": 1 }, { \"type\": \"numberRange\", \"label\": \"点赞频率（%）\", \"name\": \"task_dy_live_barrage_zan_rate\", \"value\": 5, \"max\": 100, \"min\": 0, \"step\": 1 }, { \"type\": \"numberRange\", \"label\": \"弹幕频率（%）\", \"name\": \"task_dy_live_barrage_comment_rate\", \"value\": 5, \"max\": 100, \"min\": 0, \"step\": 1 }, { \"type\": \"textArea\", \"label\": \"弹幕内容（一行为一条弹幕）\", \"name\": \"task_dy_live_barrage_comments\", \"value\": \"六六六\\n厉害了\\n&#x1F604;&#x1F604;\" }, { \"type\": \"switch\", \"label\": \"弹幕带表情\", \"name\": \"task_dy_live_barrage_comment_emoji_switch\" } ] } }, { \"title\": \"评论截流II\", \"hidden\": false, \"columns\": 8, \"icon\": \"img/comment-2.png\", \"jsFile\": \"tasks/task_dy_toker_video.js\", \"runType\": \"floatSwitch\", \"autoOpen\": true, \"packageName\": \"com.ss.android.ugc.aweme\", \"settingPage\": { \"params\": [ { \"type\": \"textArea\", \"label\": \"评论关键词（多关键词使用逗号隔开）\", \"value\": \"\", \"name\": \"task_dy_toker_live_video_comment_keyword\" }, { \"type\": \"numberRange\", \"label\": \"评论赞频率\", \"name\": \"task_dy_toker_live_video_zan_comment_rate\", \"value\": 0, \"max\": 100, \"min\": 0, \"step\": 1 }, { \"type\": \"numberRange\", \"label\": \"关注频率\", \"name\": \"task_dy_toker_live_video_focus_rate\", \"value\": 0, \"max\": 100, \"min\": 0, \"step\": 1 }, { \"type\": \"numberRange\", \"label\": \"回复作品首评概率\", \"name\": \"task_dy_toker_live_video_comment_first_comment_rate\", \"value\": 0, \"max\": 100, \"min\": 0, \"step\": 1 }, { \"type\": \"numberRange\", \"label\": \"操作间隔（秒）\", \"name\": \"task_dy_toker_live_video_second\", \"value\": 0, \"max\": 100, \"min\": 5, \"step\": 5 }, { \"type\": \"notice\", \"title\": \"1.点击“保存并运行”后，请先进入视频搜索页，手动输入关键词、筛选时间，切换到“视频”选项；然后再点击右侧“启动”按钮执行\\n\\n2.关注、评论赞，三者会按照概率执行，并且只执行其中一个\" } ] } } ] }, { \"title\": \"小红薯·万能引流\", \"methods\": [ { \"title\": \"万能营销\", \"icon\": \"img/xhs-wanneng.png\", \"jsFile\": \"tasks/task_xhs_toker.js\", \"columns\": 8, \"settingPage\": { \"params\": [ { \"type\": \"switch\", \"label\": \"同城营销\", \"name\": \"toker_xhs_is_city\", \"value\": false }, { \"type\": \"numberRange\", \"label\": \"操作间隔（秒）\", \"name\": \"toker_xhs_op_second\", \"max\": 60, \"min\": 1, \"value\": 1, \"step\": 1 }, { \"type\": \"numberRange\", \"label\": \"观看时长（秒）\", \"name\": \"toker_xhs_view_video_second\", \"max\": 60, \"min\": 5, \"value\": 12, \"step\": 1 }, { \"type\": \"textArea\", \"label\": \"关键词筛选（多个使用逗号隔开）\", \"name\": \"toker_xhs_view_video_keywords\", \"value\": \"\", \"notice\": \"* 关键词不填则操作所有\" }, { \"type\": \"numberRange\", \"label\": \"点赞频率（%）\", \"name\": \"toker_xhs_zan_rate\", \"max\": 100, \"min\": 0, \"step\": 1, \"value\": 25 }, { \"type\": \"numberRange\", \"label\": \"评论频率（%）\", \"name\": \"toker_xhs_comment_rate\", \"max\": 100, \"min\": 0, \"step\": 1, \"value\": 20 }, { \"type\": \"numberRange\", \"label\": \"关注频率（%）\", \"name\": \"toker_focus_rate\", \"max\": 100, \"min\": 0, \"step\": 1, \"value\": 1 }, { \"type\": \"numberRange\", \"label\": \"私信频率（%）\", \"name\": \"toker_xhs_private_msg_rate\", \"max\": 100, \"min\": 0, \"step\": 1, \"value\": 1, \"hidden\": true }, { \"type\": \"numberRange\", \"label\": \"评论区点赞频率（%）\", \"name\": \"toker_comment_area_zan_rate\", \"max\": 100, \"min\": 0, \"step\": 1, \"value\": 25, \"hidden\": true }, { \"type\": \"checkboxGroup\", \"label\": \"性别\", \"name\": \"toker_xhs_run_sex\", \"columnCount\": 6, \"hidden\": true, \"children\": [ \"女\", \"男\", \"未知\" ], \"values\": [ \"0\", \"1\", \"2\" ] }, { \"type\": \"numberRange\", \"label\": \"最小年龄\", \"name\": \"toker_xhs_run_min_age\", \"max\": 100, \"min\": 0, \"step\": 1, \"value\": 18, \"hidden\": true }, { \"type\": \"numberRange\", \"label\": \"最大年龄\", \"name\": \"toker_xhs_run_max_age\", \"max\": 100, \"min\": 0, \"step\": 1, \"value\": 60, \"hidden\": true }, { \"type\": \"checkboxGroup\", \"label\": \"运行时间\", \"name\": \"toker_xhs_run_hour\", \"columnCount\": 6, \"children\": [ \"0时\", \"1时\", \"2时\", \"3时\", \"4时\", \"5时\", \"6时\", \"7时\", \"8时\", \"9时\", \"10时\", \"11时\", \"12时\", \"13时\", \"14时\", \"15时\", \"16时\", \"17时\", \"18时\", \"19时\", \"20时\", \"21时\", \"22时\", \"23时\" ], \"values\": [ \"10\", \"11\", \"12\", \"15\", \"17\", \"18\", \"20\", \"21\", \"22\" ] } ] } }, { \"title\": \"同行拓客\", \"icon\": \"img/xhs-fans.png\", \"jsFile\": \"tasks/task_xhs_fans.js\", \"runType\": \"floatSwitch\", \"autoOpen\": true, \"columns\": 8, \"packageName\": \"com.xingin.xhs\", \"settingPage\": { \"params\": [ { \"type\": \"numberRange\", \"label\": \"运行次数\", \"name\": \"task_xhs_fans_run_count\", \"value\": 10, \"max\": 300, \"min\": 1 }, { \"type\": \"numberRange\", \"label\": \"操作平均间隔（秒）\", \"name\": \"task_xhs_fans_interval\", \"value\": 5, \"max\": 100, \"min\": 1, \"step\": 1 }, { \"type\": \"numberRange\", \"label\": \"主页平均停留时间（秒）\", \"name\": \"task_xhs_fans_home_wait\", \"value\": 5, \"max\": 100, \"min\": 1, \"step\": 1 }, { \"type\": \"numberRange\", \"label\": \"作品平均停留时间（秒）\", \"name\": \"task_xhs_fans_work_wait\", \"value\": 5, \"max\": 100, \"min\": 2, \"step\": 1 }, { \"type\": \"number\", \"label\": \"粉丝数量不少于\", \"name\": \"task_xhs_fans_min_fans\", \"value\": 0 }, { \"type\": \"number\", \"label\": \"粉丝数量不大于\", \"name\": \"task_xhs_fans_max_fans\", \"value\": 10000 }, { \"type\": \"number\", \"label\": \"作品数大于\", \"name\": \"task_xhs_fans_min_work\", \"value\": 1 }, { \"type\": \"checkboxGroup\", \"label\": \"功能\", \"name\": \"task_xhs_fans_op\", \"columnCount\": 6, \"children\": [ \"关注\", \"私信\", \"首作品点赞\" ], \"values\": [ \"0\", \"2\" ] }, { \"type\": \"notice\", \"title\": \"功能说明：在其他账号的 “粉丝” 或者 “关注” 界面运行，系统会根据相关筛选条件执行相应的任务。作品数限制，只针对“粉丝”界面。（适用于寻找客户，对同行的精准粉丝进行推广引流）\" } ] } }, { \"title\": \"赞回访\", \"icon\": \"img/xhs-zan.png\", \"jsFile\": \"tasks/task_xhs_zan_back.js\", \"runType\": \"floatSwitch\", \"autoOpen\": true, \"columns\": 8, \"packageName\": \"com.xingin.xhs\", \"settingPage\": { \"params\": [ { \"type\": \"numberRange\", \"label\": \"运行次数\", \"name\": \"task_xhs_zan_back_run_count\", \"value\": 10, \"max\": 300, \"min\": 1 } ] } } ] }, { \"title\": \"小红薯·其他功能\", \"methods\": [ { \"title\": \"USER_ID私信\", \"columns\": 16, \"icon\": \"img/private-2.png\", \"jsFile\": \"tasks/task_xhs_toker_uid.js\", \"settingPage\": { \"params\": [ { \"type\": \"text\", \"label\": \"USER_ID（每行一个）\", \"name\": \"task_xhs_toker_uid_account\", \"value\": \"\", \"lines\": 5 }, { \"type\": \"numberRange\", \"label\": \"操作平均间隔（秒）\", \"name\": \"task_xhs_toker_uid_interval\", \"value\": 5, \"max\": 100, \"min\": 1, \"step\": 1 }, { \"type\": \"checkboxGroup\", \"label\": \"功能\", \"name\": \"task_xhs_toker_uid_op\", \"columnCount\": 6, \"children\": [ \"关注\", \"私信\" ], \"values\": [ \"0\", \"1\" ] }, { \"type\": \"notice\", \"title\": \"请确保后台弹窗权限已打开\" } ] } }, { \"title\": \"垂直养号\", \"columns\": 16, \"icon\": \"img/vertical.png\", \"jsFile\": \"tasks/task_xhs_yanghao.js\", \"packageName\": \"com.ss.android.ugc.aweme\", \"settingPage\": { \"params\": [ { \"type\": \"text\", \"label\": \"关键词\", \"name\": \"task_xhs_yanghao_keyword\", \"value\": \"\", \"lines\": 1 }, { \"type\": \"numberRange\", \"label\": \"操作平均间隔（秒）\", \"name\": \"task_xhs_yanghao_interval\", \"value\": 5, \"max\": 100, \"min\": 1, \"step\": 1 }, { \"type\": \"numberRange\", \"label\": \"评论概率\", \"name\": \"task_xhs_yanghao_comment_rate\", \"value\": 15, \"max\": 100, \"min\": 1, \"step\": 1 }, { \"type\": \"numberRange\", \"label\": \"点赞概率\", \"name\": \"task_xhs_yanghao_zan_rate\", \"value\": 20, \"max\": 100, \"min\": 1, \"step\": 1 }, { \"type\": \"numberRange\", \"label\": \"收藏概率\", \"name\": \"task_xhs_yanghao_collect_rate\", \"value\": 5, \"max\": 100, \"min\": 1, \"step\": 1 }, { \"type\": \"numberRange\", \"label\": \"刷作品总数\", \"name\": \"task_xhs_yanghao_count\", \"value\": 100, \"max\": 3000, \"min\": 1, \"step\": 1 } ] } } ] } ], \"bottomMenus\": [ { \"title\": \"{NAME}\", \"icon\": \"img/home.png\", \"banner\": \"img/home-top.png\", \"type\": \"home\" }, { \"title\": \"话术设置\", \"icon\": \"img/speech.png\", \"type\": \"speech\" }, { \"title\": \"系统设置\", \"icon\": \"img/setting.png\", \"type\": \"setting\" } ], \"settingLists\": [ { \"title\": \"联系客服\", \"icon\": \"img/kefu.png\", \"type\": \"customerService\", \"description\": \"客服微信：DeekeScript\", \"hidden\": false }, { \"title\": \"功能说明\", \"icon\": \"img/manual.png\", \"type\": \"notice\", \"file\": \"task.html\" }, { \"title\": \"智能话术\", \"icon\": \"img/ai.png\", \"type\": \"settingService\", \"settingPage\": { \"params\": [ { \"type\": \"switch\", \"label\": \"开启{NAME}智能AI话术\", \"value\": false, \"name\": \"setting_baidu_wenxin_switch\" }, { \"type\": \"radio\", \"label\": \"请选择角色\", \"name\": \"setting_baidu_wenxin_role\", \"value\": \"1\", \"dataFrom\": \"role\", \"options\": [] }, { \"type\": \"text\", \"label\": \"{NAME} Key\", \"value\": \"如：NZmgn5urWoHhKWe8XbGMdbUp\", \"name\": \"setting_baidu_wenxin_key\" }, { \"type\": \"text\", \"label\": \"{NAME} Secret\", \"name\": \"setting_baidu_wenxin_secret\", \"value\": \"如：brIq133KaAPNEkn109avxl7MXUHHW0kg\" }, { \"type\": \"notice\", \"title\": \"如果开启超级霸屏，请配置账号收藏的表情图\", \"hidden\": true }, { \"type\": \"numberRange\", \"label\": \"超级霸屏(%)\", \"name\": \"setting_comment_with_photo\", \"value\": 0, \"min\": 0, \"max\": 100, \"hidden\": false }, { \"type\": \"notice\", \"title\": \"* 开启后，将使用{NAME}官方AI角色（可自定义）进行评论和私信，让拓客变得更简单~\", \"textColor\": \"#AA0000\", \"textSize\": 16 } ] }, \"hidden\": false }, { \"title\": \"数据统计\", \"icon\": \"img/statistics.png\", \"type\": \"statistics\", \"jsFile\": \"statistics/statistics.js\" }, { \"title\": \"上传日志\", \"icon\": \"img/upload.png\", \"type\": \"uploadLog\", \"url\": \"/dke/uploadLog\" }, { \"title\": \"系统升级\", \"icon\": \"img/update.png\", \"type\": \"updateApp\", \"url\": \"/dke/updateApp\" }, { \"title\": \"清理数据\", \"icon\": \"img/clear.png\", \"description\": \"确定清理嘛？\", \"type\": \"clear\" }, { \"title\": \"举报中心\", \"icon\": \"img/jubao.png\", \"type\": \"qiwei\", \"url\": \"https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=910d7c7c-d74a-4ce5-a070-0f3383b1f6ee\", \"hidden\": false, \"settingPage\": { \"params\": [ { \"type\": \"notice\", \"title\": \"如果我们的代理商有侵犯到你的权益，请立即举报！\", \"hidden\": false }, { \"type\": \"text\", \"label\": \"举报人\", \"value\": \"\", \"name\": \"qiwei_name\" }, { \"type\": \"text\", \"label\": \"举报人手机号\", \"value\": \"\", \"name\": \"qiwei_mobile\" }, { \"type\": \"text\", \"label\": \"举报人身份证号码\", \"value\": \"\", \"name\": \"qiwei_card_no\" }, { \"type\": \"text\", \"label\": \"举报内容\", \"value\": \"\", \"hint\": \"请详细描述你举报该软件的原因，请不要恶意举报！\", \"name\": \"qiwei_content\", \"lines\": 3 } ] } } ], \"apis\": [ { \"type\": \"bind\", \"url\": \"/dke/login\" }, { \"type\": \"checkBind\", \"url\": \"/dke/checkBind\" }, { \"type\": \"aiSpeechToken\", \"url\": \"/dke/getBaiduToken\" }, { \"type\": \"config\", \"url\": \"/dkee/config\" }, { \"type\": \"getToken\", \"url\": \"/alipay/getToken\" }, { \"type\": \"createOrder\", \"url\": \"/alipay/createOrder\" } ] } Copyright © script.deeke.top 2024 all right reserved，powered by Gitbook该文章修订时间： 2025-03-05 12:01:11 "},"config/vscode.html":{"url":"config/vscode.html","title":"Vscode开发篇","keywords":"","body":"VSCode开发篇 准备工作 如果电脑还没有安装vscode，请先下载vscode 在Vscode中安装DeekeScript开发插件，如下图，点击“安装”即可 如果你还没有下载项目代码，请先阅读快速开始 Vscode扩展使用 vscode中执行DeekeScript命令有两种方式： 方法1：通过“查看”-“命令面板”-“搜索命令”-“点击命令执行”，如下图： 方法2：打开deekeScript.json文件或者任意js文件，通过右上角图标执行，如下图： 下面以方法2来演示vscode连接、关闭连接、代码同步、文件同步、文件执行 连接手机：点击“连接手机”按钮，在弹窗中输入手机端的局域网IP地址，看到“连接成功”即表示连接成功： 打开DeekeScript控制台（可以查看相关信息，包括脚本打印信息），如下图： 项目同步：点击“项目同步”按钮，如下图： Android端点击“刷新”按钮（安卓图标右侧的按钮） Android端点击“运行”按钮（安卓图标左侧按钮），运行结果如下图： 执行单个JavaScript文件，如下图： 停止所有脚本（包括死循环脚本），如下图： 命令说明： DeekeScript 关闭连接：关闭vscode和Android手机的连接 DeekeScript 连接手机：vscode连接手机（连接后才能“同步代码”、“执行代码”） DeekeScript 停止所有脚本：关闭DeekeScript在Android手机上的所有脚本运行 DeekeScript 项目同步：将vscode中的项目代码同步到Android手机端 DeekeScript 仅当前文件执行：执行当前JavaScript文件的脚本 DeekeScript 文件同步：仅同步当前文件到Android手机 Copyright © script.deeke.top 2024 all right reserved，powered by Gitbook该文章修订时间： 2025-03-05 12:01:11 "},"base/app/app.html":{"url":"base/app/app.html","title":"App","keywords":"","body":"App App对象提供了一些应用相关的数据获取能力，比如当前App的版本号、获取某个App的版本等。 currentPackageName() 返回 {string} 获取当前应用的包名，获取你当前开发的App的包名，比如在DeekeScript中执行这个函数，将获取到“top.deeke.script” console.log(App.currentPackageName());//输出 top.deeke.script currentVersionCode() 返回 {number} 整型 返回当前App的版本号，这个在App更新的时候判断当前App的版本号时很有用 currentVersionName() 返回 {string} 返回当前App的版本名称 packageInfo() 返回 {PackageInfo} 返回当前App的包信息，通过包信息你可以获取诸如“版本号，版本名称”等信息，可以遍历查看其属性和值 gotoIntent(uri) uri {string} 返回 {void} 根据URI启动Activity //打开抖音用户主页 user_id是抖音的用户ID App.gotoIntent('snssdk1128://user/profile/' + user_id); startActivity(intent) 2.0版本即将上线 intent {Intent} 返回 {void} 根据intent启动Activity //跳转到目标APP let intent = new Intent(Intent.ACTION_VIEW, Uri.parse(\"myapp://second_activity\")); startActivity(intent); backApp() void 返回 {void} 返回到执行脚本的APP App.backApp(); startService(intent) 2.0版本即将上线 options {object} 返回 {void} 根据选项构造一个Intent，并启动该服务。 sendBroadcast(intent) 2.0版本即将上线 intent {Intent} 返回 {void} 根据选项构造一个Intent，并发送该广播。 launch(packageName) packageName {string} 通过包名打开应用 App.launch(\"top.deeke.script\");//打开DeekeScript notifySuccess(title, content) 2.0版本即将上线 title {string} content {string} 返回 {Notification} 通过Android的通知来告知用户，当前脚本已经执行完成，并且关闭当前启动的功能 如果只是通知完成，但是不关闭当前脚本，请自定义通知实现 getAppVersionName(packageName) packageName {string} 获取某个APP的版本名称 let versionName = App.getAppVersionName(\"top.deeke.script\"); console.log(versionName); getAppVersionCode(packageName) packageName {string} 获取某个APP的版本号 let versionName = App.getAppVersionCode(\"top.deeke.script\"); console.log(versionName); openAppSetting(packageName) packageName {string} 通过包名，打开设置页面，在此页面可以无障碍点击卸载和强制停止按钮（停止应用的时候，很管用） Copyright © script.deeke.top 2024 all right reserved，powered by Gitbook该文章修订时间： 2025-03-05 12:01:11 "},"base/system/funcs.html":{"url":"base/system/funcs.html","title":"系统函数","keywords":"","body":"系统函数 - System System对象，提供一些常用的方法。 sleep(millisecond) millisecond {number} 毫秒 休眠millisecond毫秒 console.log('立即输出'); System.sleep(1000); console.log('1秒钟后输出'); time() 返回 {string} 返回当前系统时间 console.log(System.time());//输出：2024-03-07 12:12:12 currentActivity() 返回 {string} 返回最近一次监测到的正在运行的Activity名称，一般可以认为就是当前正在运行的Activity的名称。 此函数依赖于无障碍服务，如果服务未启动，则抛出异常并提示用户启动。 console.log(System.currentActivity());//输出：top.deeke.script currentPackage() 返回 {string} 返回最近一次监测到的正在运行的Package的名称，一般可以认为就是当前正在运行的Package的名称。 此函数依赖于无障碍服务，如果服务未启动，则抛出异常并提示用户启动。 console.log(System.currentPackage());//输出：top.deeke.script setClip(content) 2.0版本即将上线 content {string} 返回 {void} 将内容写入到剪切板中 getClip() 2.0版本即将上线 返回 {string|null} 返回剪切板内容 toast(message) msg {string} 要显示的信息 返回 {void} 以气泡显示信息message几秒。(具体时间取决于安卓系统，一般都是2秒) 注意，信息的显示是\"异步\"执行的，并且，不会等待信息消失程序才继续执行。 toastLong(message) msg {string} 要显示的信息 返回 {void} 比toast(message)显示的更久一些，具体时长以开发机为准 注意，信息的显示是\"异步\"执行的，并且，不会等待信息消失程序才继续执行。 waitForActivity(activity, period, timeout) activity {string} 等待的Activity名称 period {number} 等待的毫秒数 timeout {number} 等待的总毫秒数 返回 {void} 等待Activity出现，period为检查Activity的间隔。如果timeout毫秒后未出现，则停止等待。 waitForPackage(package, period, timeout) package {string} 等待的Package名称 period {number} 等待的毫秒数 timeout {number} 等待的总毫秒数 返回 {void} 等待Package出现，period为检查Package的间隔。如果timeout毫秒后未出现，则停止等待。 exit() 返回 {void} 关闭脚本引擎 AiSpeechToken(key, secret) key {string} secret {string} 返回 {string} 获取远程AI智能话术的token，通过此token再去调用对应的接口；下面是完整的JavaScript代码。 let baiduWenxin = { key: 'setting_baidu_wenxin_role', dataFrom: 'role', getToken(key, secret) { key = key || storage.get('setting_baidu_wenxin_key'); secret = secret || storage.get('setting_baidu_wenxin_secret'); //查看是否激活了 let body = System.AiSpeechToken(key, secret); Log.log('body', body); let aiRes = JSON.parse(body); Log.log('aiRes[\\'data\\']', aiRes['data']); if (aiRes['code'] === 0) { //开始激活 return aiRes['data']; } else if (aiRes['code'] === 1) { FloatDialogs.show('提示', aiRes.msg); System.sleep(360000 * 1000); return; } else { Log.log('网络异常了'); return false; } }, getComment(title) { let res = this.getToken(); let access_token = res['access_token']; let len = 20 + Math.round(30 * Math.random()); let tmp = ''; if (title) { tmp = '请你根据短视频标题生成一个有趣的评论内容，标题是：' + title; } let params = { \"messages\": [ { \"role\": \"user\", \"content\": \"接下来，请你随机帮我生成一条评论，可以是夸别人的视频拍的好、也开始是写一条祝福语、也可以你最想告诉大众的想法\" } ], \"max_output_tokens\": 60,//最大输出长度60 \"system\": System.getDataFrom(this.key, this.dataFrom, 'content'), } if (title) { params = { \"messages\": [ { \"role\": \"user\", \"content\": \"接下来，我会给你一条视频标题，请你帮我生成一条评论，评论内容一定要精简，尽可能能让人看了想和我互动，并且尽可能不要激怒别人；内容字数不要超过\" + len + \"字，这个很重要\" }, { \"role\": \"assistant\", \"content\": '好的，我会尽我所能，请给我一条视频标题吧！' }, { \"role\": \"user\", \"content\": title }, ], \"max_output_tokens\": 60,//最大输出长度60 \"system\": System.getDataFrom(this.key, this.dataFrom, 'content'), } } //console.log(System.getDataFrom(this.key, this.dataFrom, 'content')); res = Http.post('https://aip.baidubce.com/rpc/2.0/ai_custom/v1/wenxinworkshop/chat/completions?access_token=' + access_token, params); if (res == null) { return false; } let result = JSON.parse(res); Log.log('百度文心返回话术-1', title ? '视频的标题是“' + title + '”，请结合你的角色，写一条少于' + len + '字的吸引人的评论内容' : '请你写一条字数小于' + len + '字的吸引人的评论视频内容', result); if (result && result['result']) { if (result['result'].substring(0, 1) === '\"' && result['result'].substring(result['result'].length - 1) === '\"') { result['result'] = result['result'].substring(1, result['result'].length - 1); } } return result['result'] || false; } } generateWindowElements() 返回 {void} 该函数会将当前界面的所有控件记录到日志文件（APP上传日志后，即可拿到界面的控件的信息，一般用于bug定位使用）。 getDataFrom() key {string} dataForm {string} content {string} 返回 {void} dataForm类型的表单数据获取 let key = 'setting_baidu_wenxin_role';//deekeScript.json中设置的角色表单的name //”role“是配置接口（api地址：/dkee/config）中返回的内容 System.getDataFrom(key, 'role', 'content');//获取当前设置的角色的内容 Copyright © script.deeke.top 2024 all right reserved，powered by Gitbook该文章修订时间： 2025-03-05 12:01:11 "},"base/device/device.html":{"url":"base/device/device.html","title":"设备-Device","keywords":"","body":"设备 - Device Device对象，提供一些设备相关的方法。 keepScreenOn(seconds) seconds {number} 屏幕常量秒数 返回 {void} 屏幕常量，如果seconds为0，则亮屏10分钟，否则亮屏seconds秒。seconds最大值可能在不同设备上有一定限制。 保证屏幕常量，一般在操作（操作过程中，屏幕一般不会息屏）完相关步骤后，回到我们的App应用（在我们自己的应用上，可以保证长时间不息屏），即可保证不会息屏 Device.keepScreenOn(600);//常量10分钟 closeScreenLight() 返回 {void} 常量关闭 width() 返回 {number} 返回宽度 单位为px 获取屏幕真实的宽度（像素值）；手机旋转方向后，依然会返回真实的宽度 height() 返回 {number} 返回宽度 单位为px 获取屏幕真实的高度（像素值）；手机旋转方向后，依然会返回真实的高度 sdkInt() 返回 {number} 返回SDK的版本号 device() 返回 {string} 请注意，这个返回值并不是设备的市场名称（如“华为荣耀V30”）、品牌名（如“华为”）或型号名（如“V30”）。它更偏向于一个内部或技术名称，用于在Android框架和开发中识别不同的设备硬件。 获取设备的硬件标识，比如华为荣耀，可能返回\"honor_xxx\"的字符串 androidVersion() 返回 {string} 返回Android的版本号 createUuid() 返回 {string} 由于Android日益严格的权限管控，导致设备的唯一标识不太方便获取，本系统提供了一个uuid生成方案，来解决设备识别问题；建议在开发者在用户激活设备之后，使用此方法创建一个uuid（创建前，请使用getUuid检查是否存在）；后续将这个唯一标识和激活码绑定； 注意：App卸载后、设备恢复出厂等操作，将会让生成的uuid丢失 设置设备的随机的uuid getUuid() 返回 {string} 获取设备的随机的uuid isScreenOn() 返回 {boolean} 获取屏幕是否亮屏 brand() 返回 {string} 获取设备的品牌信息；对于华为（Huawei）的设备，它会返回 \"huawei\"。 os() 返回 {string} 获取设备操作系统信息；对于大多数标准的 Android 设备，Build.VERSION.BASE_OS 通常返回 \"android\"。然而，在某些设备或定制 Android 版本中，制造商可能会为其定制的基础操作系统设置不同的名称或标识符。 model() 返回 {string} 获取设备的model信息；如：荣耀特定设备的型号名称，如 \"Honor V30\" 或类似的字符串 codename() 返回 {string} 获取设备的codename信息；例如 \"REL\" 表示正式发布的版本 Copyright © script.deeke.top 2024 all right reserved，powered by Gitbook该文章修订时间： 2025-03-05 12:01:11 "},"base/uiSelector/uiSelector.html":{"url":"base/uiSelector/uiSelector.html","title":"选择器-UiSelector","keywords":"","body":"选择器 - UiSelector 基本介绍 UiSelector 即选择器，用于筛选屏幕上的控件，再对控件进行点击、输入文本内容、长按等动作。这里需要先简单介绍一下控件和界面的相关知识。 Android中的界面是由一个个控件构成的，例如图片部分是一个图片控件(ImageView)，文字部分是一个文字控件(TextView)；同时，通过各种布局来决定各个控件的位置，例如，线性布局(LinearLayout)里面的控件都是按水平或垂直一次叠放的，列表布局(AbsListView)则是以列表的形式显示控件。 控件有各种属性，包括文本(text), 描述(desc), 类名(className)，是否可以点击（clickable）, id 等等。我们通常用一个控件的属性来找到这个控件，例如，想要点击某软件聊天窗口的\"发送\"按钮，我们就可以通过它的文本属性为\"发送\"来找到这个控件并点击他，具体代码为: 获取控件后，即可对控件进行点击，滑动，输入文本等操作。控件操作请阅读 控件操作 部分 //这里的sendButton就是一个控件对象，可以对控件对象进行各种操作 let sendButton = new UiSelector().text(\"发送\").findOne(); if(sendButton){ sendButton.click(); } id(name) name {string} 返回 {UiSelector} 返回选择器自身以便链式调用 为当前选择器附加控件\"id 等于字符串 name\"的筛选条件。【对应节点选择器中的viewIdResourceName】 className(name) name {string} 返回 {UiSelector} 返回选择器自身以便链式调用 为当前选择器附加控件\"className 等于字符串 name\"的筛选条件。 bounds(left, top, right, bottom) left {number} 控件左边缘与屏幕左边的距离 top {number} 上边距 right {number} 右边距 bottom {number} 下边距 返回 {UiSelector} 返回选择器自身以便链式调用 为当前选择器附加控件\"bounds范围\"的筛选条件。 text(content) content {string} 返回 {UiSelector} 返回选择器自身以便链式调用 为当前选择器附加控件\"text 等于字符串 content\"的筛选条件。 desc(content) content {string} 返回 {UiSelector} 返回选择器自身以便链式调用 为当前选择器附加控件\"contentDescribe 等于字符串 content\"的筛选条件。【对应节点选择器中的contentDescription】 clickable(canClick) canClick {boolean} 是否可以点击 返回 {UiSelector} 返回选择器自身以便链式调用 为当前选择器附加控件\"clickable 等于 canClick\"的筛选条件。 selected(isSelected) isSelected {boolean} 是否已选择 返回 {UiSelector} 返回选择器自身以便链式调用 为当前选择器附加控件\"selected 等于 isSelected\"的筛选条件。 checked(isChecked) isChecked {boolean} 是否被选中 返回 {UiSelector} 返回选择器自身以便链式调用 为当前选择器附加控件\"checked 等于字符串 isChecked\"的筛选条件。 enabled(isEnabled) isEnabled {boolean} 是否可以交互（为false的时候表示禁用） 返回 {UiSelector} 返回选择器自身以便链式调用 为当前选择器附加控件\"enabled 等于字符串 isEnabled\"的筛选条件。 scrollable(canScrollable) canScrollable {boolean} 是否可以滚动 返回 {UiSelector} 返回选择器自身以便链式调用 为当前选择器附加控件\"scrollable 等于字符串 canScrollable\"的筛选条件。 checkable(isCheckable) isCheckable {boolean} 是否可以选中 返回 {UiSelector} 返回选择器自身以便链式调用 为当前选择器附加控件\"checkable 等于字符串 isCheckable\"的筛选条件。 textContains(content) content {string} 返回 {UiSelector} 返回选择器自身以便链式调用 为当前选择器附加控件\"text 包含字符串 content\"的筛选条件。 isVisibleToUser(canVisible) canVisible {boolean} 是否对用户可见（控件在屏幕上） 返回 {UiSelector} 返回选择器自身以便链式调用 注意：因为它判断的是视图本身是否在布局层级中可见（被遮挡了，也会返回true） 为当前选择器附加控件\"isVisibleToUser 等于 canVisible\"的筛选条件。 textMatches(content) content {string} 返回 {UiSelector} 返回选择器自身以便链式调用 为当前选择器附加控件\"text 正则匹配 content\"的筛选条件。 descContains(content) content {string} 返回 {UiSelector} 返回选择器自身以便链式调用 为当前选择器附加控件\"contentDescribe 正则匹配 content\"的筛选条件。 descMatches(content) content {string} 返回 {UiSelector} 返回选择器自身以便链式调用 为当前选择器附加控件\"contentDescribe 正则匹配 content\"的筛选条件。 filter(callback) callback {Callable} 返回{UiObject[]} 返回控件对象 对当前查找到的UiObject数组进行过滤，过滤的时候执行callback方法，该方法返回false，则对应的UiObject被过滤掉 let ui = UiSelector().filter((v)=>{ return v && v.bounds() && v.bounds().left > 100 && v.bounds().top > 300;//获取左边距大于100px，上边距大于300px的控件 }).findOne(); exist() content {string} 返回 {boolean} 返回是否存在 判断当前选择器是否能匹配到UiObject控件信息。 waitFindOne() 返回 {UiObject} 返回控件对象 一直阻塞，直到某个控件对象出现在屏幕上 find() 返回 {UiObject[]} 获取当前选择器筛选的所有UiObject控件。 findBy(uiSelector) uiSelector {UiSelector} 返回 {UiObject[]} 获取当前选择器筛选的所有UiObject控件（a）中查找符合uiSelector选择器的UiObject；从a集合查找，然后遍历它们的子控件、子控件的子控件，直到a下面的所有控件都被查找一遍才结束。 findBy(timeout) timeout {int} 返回 {UiObject[]} 获取当前选择器筛选的所有UiObject控件，如果控件一直没有出现，则最大等待timeout毫秒。 findOne() 返回 {UiObject} 获取当前选择器筛选的第一个UiObject控件。 findOnce() 返回 {UiObject} 获取当前选择器筛选的第一个UiObject控件。 findOne(uiSelector) uiSelector {UiSelector} 返回 {UiObject} 获取当前选择器筛选的第一个UiObject控件（a）中查找符合uiSelector选择器的UiObject；从a集合查找，然后遍历它们的子控件、子控件的子控件，直到a下面的所有控件都被查找一遍才结束。 find(timeout) timeout {number} 返回 {UiObject} 获取当前选择器筛选的第一个UiObject控件，查找timeout时间，时间结束后不管是否找到，都会结束查找，并且返回。 Copyright © script.deeke.top 2024 all right reserved，powered by Gitbook该文章修订时间： 2025-03-05 12:01:11 "},"base/timer/timer.html":{"url":"base/timer/timer.html","title":"定时器","keywords":"","body":"定时器 用于在未来某个未来时间执行函数；计时器函数实现了与 Web 浏览器提供的定时器类似的 API。 setTimeout(callback, delay) callback {callback} 要执行的函数 delay {number} 延时 毫秒数 2.0版本即将上线 示例： setTimeout(()=>{ console.log('2秒后执行'); }, 2000); setInterval(callback, delay) callback {callback} 要执行的函数 delay {number} 延时 毫秒数 2.0版本即将上线 示例： setInterval(()=>{ console.log('每间隔2秒执行一次'); }, 2000); setImmediate(callback) callback {callback} 要执行的函数 2.0版本即将上线 在Looper循环的当前回合结束时要调用的函数 示例： setImmediate(()=>{ console.log('脚本最后执行'); }); clearTimeout(id) 2.0版本即将上线 取消一个由setTimeout(callback, delay)创建的定时任务 示例： let timer = setTimeout(()=>{ console.log(123); }, 1000); clearTimeout(timer); clearInterval(id) 2.0版本即将上线 取消一个由setInterval(callback, delay)创建的定时任务 示例： let timer = setInterval(()=>{ console.log(123); }, 1000); clearInterval(timer); clearImmediate(id) 2.0版本即将上线 取消一个由setImmediate(callback, delay)创建的定时任务 示例： let timer = setImmediate(()=>{ console.log(123); }); clearImmediate(timer); Copyright © script.deeke.top 2024 all right reserved，powered by Gitbook该文章修订时间： 2025-03-05 12:01:11 "},"base/http/http.html":{"url":"base/http/http.html","title":"Http","keywords":"","body":"网络请求-Http Http模块提供一些进行http请求的函数。 get(url) url {string} 请求地址 headers {json} 请求头 可以为 null let res = Http.get('https://script.deeke.cn/api/userInfo'); console.log(res);//输出 {code: 0, msg: \"成功\", data: {name: \"DeekeScript\", weixin: \"DeekeScript\"}} post(url, params) url {string} 请求地址 params {json} 请求参数 headers {json} 请求头 可以为 null post请求的Content-type为\"application/json; charset=utf-8\" let params = { account: \"DeekeScript\", password: \"DeekeScript\" } let res = Http.post('https://script.deeke.cn/api/login', params, null); console.log(res);//输出 {code: 0, msg: \"成功\", data: []} postFile(url, files, params, callback) url {string} 请求地址 files {File[]} 请求文件列表 params {json} 请求参数 headers {json} 请求头 可以为 null let files = [new File(\"文件地址\"), new File(\"文件地址2\")]; let params = {username: \"DeekeScript\"}; let res = Http.postFile('https://script.deeke.top/api/fileUpload', files, params, { success: (response)=>{ //处理逻辑 let js = response.json(); console.log(js); }, fail: (response)=>{ //失败逻辑 } }); setHeader(headers) headers {json} 请求头设置 2.0版本即将发布 Copyright © script.deeke.top 2024 all right reserved，powered by Gitbook该文章修订时间： 2025-03-05 12:01:11 "},"base/webSocket/webSocket.html":{"url":"base/webSocket/webSocket.html","title":"WebSocket","keywords":"","body":"webSocket create 2.0版本即将上线 Copyright © script.deeke.top 2024 all right reserved，powered by Gitbook该文章修订时间： 2025-03-05 12:01:11 "},"base/console/console.html":{"url":"base/console/console.html","title":"控制台-console","keywords":"","body":"控制台 - console 控制台模块提供了一个和Web浏览器中相似的用于调试的控制台。用于输出一些调试信息、中间结果等。 console模块中的一些函数也可以直接作为全局函数使用，例如log, info等。 如果你不仅仅需要打印数据到控制台，还需要记录日志到文件，请使用 日志-Log 相关的方法 注意：console是DeekeScript中唯一一个首字母小写的对象（为了适应用户习惯） log([data][, ...args]) 打印到控制台，并带上换行符。 可以传入多个参数，第一个参数作为主要信息，其他参数作为类似于 printf(3) 中的代替值（参数都会传给 util.format()）。 console.log(\"输出的内容\", 324, {name: \"张三\"}); info([data][, ...args]) 与console.log类似，但输出结果以绿色字体显示。输出优先级高于log, 用于输出重要信息。 debug([data][, ...args]) 与console.log类似，但输出结果以绿色字体显示。输出优先级高于log, 用于输出重要信息。 warn([data][, ...args]) 与console.log类似，但输出结果以蓝色字体显示。输出优先级高于info, 用于输出警告信息。 error([data][, ...args]) 与console.log类似，但输出结果以红色字体显示。输出优先级高于warn, 用于输出错误信息。 Copyright © script.deeke.top 2024 all right reserved，powered by Gitbook该文章修订时间： 2025-03-05 12:01:11 "},"base/log/log.html":{"url":"base/log/log.html","title":"日志-Log","keywords":"","body":"日志 - Log 日志模块提供了一些日志写入方法，例如log, info等。 如果你不仅仅需要打印数据到控制台，还需要记录日志到文件，请使用Log相关的方法 setFile(filename); 设置日志输出文件 //未打包：最终存储在 /data/data/top.deeke.script/files/log/myfile.log //打包后：最终存储在 /data/data/com.example.myapp/files/log/myfile.log Log.setFile(\"myfile.log\"); getFileDir(filename); 获取日志文件完整路径 let filename = Log.getFileDir(\"myfile.log\"); //未打包：返回内容为 /data/data/top.deeke.script/files/log/myfile.log //打包后：返回内容为 /data/data/com.example.myapp/files/log/myfile.log Log.log(filename); log([data][, ...args]) 与console.log类似，区别是会记录输出内容到文件。 info([data][, ...args]) 与console.info类似，区别是会记录输出内容到文件。 warn([data][, ...args]) 与console.warn类似，区别是会记录输出内容到文件。 error([data][, ...args]) 与console.error，区别是会记录输出内容到文件。 Copyright © script.deeke.top 2024 all right reserved，powered by Gitbook该文章修订时间： 2024-03-07 15:59:01 "},"base/storage/storage.html":{"url":"base/storage/storage.html","title":"本地存储","keywords":"","body":"本地存储 本地存储模块提供了一些数据写入和读取的功能。 存储模块底层使用的Android DataStore实现 create(db); db {string} 返回 {boolean} 设置存储文件，不同模块可以设置不同的db 【对应Android中的filename】 注意：\"deekeScript\"的db被系统使用，用户只能读取不能写入 let storage = Storage.create('myDb'); //下面是使用系统默认的db获取数据的方法 //假设我们deekeScript.json文件中的method的settingPage里面的params有一个name为zan_rate的表单，则可以通过下面的方法获取设置的值 let zanRate = Storage.get('zan_rate'); put(key, value); key {string} value {any} 返回 {boolean} //storage通过create创建 storage.put(\"user\", \"test\"); get(key); key {string} 返回 {any} 输出键为key的值，不存在的时候返回null //storage通过create创建 let myUser = storage.get('user'); Log.log(user);//输出字符串test putXXX(key, value); key {string} value {xxx} 返回 {boolean} 注意：这里的putXXX是指一些列方法，请查看下面的案例 //storage通过create创建 storage.putInteger(\"age\", 18); storage.putBool(\"is_success\", true); storage.putDouble(\"money\", 1000000.11); storage.putObj(\"obj\", \"333\"); storage.putSet(\"arr\", [1,2,3]); getXXX(key); key {string} 返回 {xxx} 注意：这里的getXXX是指一些列方法，请查看下面的案例 //storage通过create创建 storage.getInteger(\"age\");//输出：18 storage.getBoolean(\"is_success\");//输出：true storage.getDouble(\"money\");//输出：1000000.11 storage.getObject(\"obj\");//输出：333 storage.getArray(\"arr\");//输出：[1,2,3] remove(key); key {string} 返回 {boolean} 存在则删除，不存在则什么都不做 //storage通过create创建 let user = storage.remove(\"user\"); Log.log(storage.get(\"user\"));//输出 null clear(); 返回 {boolean} 清空所有内容 //storage通过create创建 Log.log(storage.clear());//输出 true Copyright © script.deeke.top 2024 all right reserved，powered by Gitbook该文章修订时间： 2025-03-05 12:01:11 "},"base/files/files.html":{"url":"base/files/files.html","title":"文件系统-Files","keywords":"","body":"Files 这里直接使用Java内置的java.nio.file.Files对象 Files模块提供了一些常见的文件处理，包括文件读写、移动、复制、删掉等。 一次性的文件读写可以直接使用Files.read(), Files.write(), Files.append()等方便的函数; isFile(path) path {Path} 路径 返回 {boolean} 返回路径path是否是文件。 let Files = java.nio.file.Files; let Paths = java.nio.file.Paths; console.log(Files.isFile(Paths.get(\"/sdcard/文件夹/2.txt\"))); //返回false isDir(path) path {Path} 路径 返回 {boolean} 返回路径path是否是文件夹。 let Files = java.nio.file.Files; let Paths = java.nio.file.Paths; console.log(Files.isDir(Paths.get(\"/sdcard/文件夹/\"))); //返回false createFile(path) path {Path} 路径 返回 {boolean} 会尝试创建一个新文件，如果文件已经存在，会抛出FileAlreadyExistsException异常 createDirectory(path) path {Path} 路径 返回 {boolean} 会创建一个单独的目录。如果目录的父目录不存在，会抛出 NoSuchFileException，并且如果目录已经存在，它会抛出 FileAlreadyExistsException。 createDirectories(path) path {Path} 路径 返回 {boolean} 会确保目标路径的所有父目录存在。如果父目录不存在，它们会一并创建，而不会抛出异常。 如果目录已经存在，它不会抛出异常。 exists(path) path {Path} 路径 返回 {boolean} 返回在路径path处的文件是否存在。 readAllLines(path[, encoding = \"utf-8\"]) path {Path} 路径 encoding {string} 字符编码，可选，默认为utf-8 返回 {string} 读取文本文件path的所有行并返回。如果文件不存在，则抛出异常；文件特别大的情况下，不推荐使用这种方式读取文件 readBytes(path) path {string} 路径 返回 {byte[]} 读取文件path的所有内容并返回一个字节数组。如果文件不存在，则抛出异常。 write(path, text[, encoding = \"utf-8\"][, OpenOption... options]) path {Path} 路径 text {string} 要写入的文本内容 encoding {string} 字符编码 options {java.nio.file.StandardOpenOption.CREATE|java.nio.file.StandardOpenOption.APPEND}可选 把text写入到文件path中。如果文件存在则覆盖，不存在则创建。如果需要追加，则options可以设置为java.nio.file.StandardOpenOption.APPEND let Files = java.nio.file.Files; let Paths = java.nio.file.Paths; console.log(Files.write(Paths.get(\"/sdcard/文件夹/2.txt\"), \"DeekeScript\", java.nio.file.StandardOpenOption.APPEND)); //返回false write(path, bytes[, OpenOption... options]) path {Path} 路径 bytes {byte[]} 字节数组，要写入的二进制数据 options {java.nio.file.StandardOpenOption.CREATE|java.nio.file.StandardOpenOption.APPEND}可选 把bytes写入到文件path中。如果文件存在则覆盖，不存在则创建。 copy(fromPath, toPath) fromPath {Path} 要复制的原文件路径 toPath {Path} 复制到的文件路径 返回 {boolean} 复制文件，返回是否复制成功。 let Files = java.nio.file.Files; let Paths = java.nio.file.Paths; Files.copy(Paths.get(\"/sdcard/1.txt\"), Paths.get(\"/sdcard/Download/1.txt\")); move(fromPath, toPath) fromPath {Path} 要移动的原文件路径 toPath {Path} 移动到的文件路径 返回 {boolean} 移动文件，返回是否移动成功 delete(path) path {Path} 路径 返回 {boolean} 删除文件；文件不存在，它会抛出异常。 deleteIfExists(path) path {string} 路径 path {string} 路径 返回 {boolean} 删除文件，如果文件存在 list(path) path {Path} 路径 返回path下面的所有文件和文件夹。 Copyright © script.deeke.top 2024 all right reserved，powered by Gitbook该文章修订时间： 2025-03-05 12:01:11 "},"base/gesture/gesture.html":{"url":"base/gesture/gesture.html","title":"手势操作","keywords":"","body":"手势 - Gesture click(x, y) x {number} x轴坐标 y {number} y轴坐标 返回 {boolean} 点击屏幕位置 Gesture.click(100, 200); longClick(x, y) x {number} x轴坐标 y {number} y轴坐标 返回 {boolean} 长按屏幕位置 Gesture.longClick(100, 200); press(x, y, duration) x {number} x轴坐标 y {number} y轴坐标 duration {number} 按压时间 毫秒 返回 {boolean} 按压屏幕位置一段时间 Gesture.press(100, 200, 10);//每次按压10毫秒 swipe(startX, startY, endX, endY, duration) startX {number} 开始位置的x轴坐标 startX {number} 开始位置的y轴坐标 endX {number} 结束位置的x轴坐标 endY {number} 结束位置的y轴坐标 duration {number} 滑动时间 毫秒 返回 {boolean} 滑动手势 Gesture.swipe(100, 200, 500, 400, 200);//从坐标（100,200）滑动到（500，400），执行时间为200毫秒 back() 返回 {boolean} 点击返回按键 Gesture.back(); home() 返回 {boolean} 点击Home按键，返回到主界面 Gesture.home(); recents() 返回 {boolean} 显示最近任务 Gesture.back(); Copyright © script.deeke.top 2024 all right reserved，powered by Gitbook该文章修订时间： 2024-03-14 11:07:51 "},"base/uiObject/uiObject.html":{"url":"base/uiObject/uiObject.html","title":"控件操作","keywords":"","body":"控件操作 基本介绍 UiObject 即控件对象，可以对控件进行点击、输入文本、长按等动作。这里需要先简单介绍一下控件的相关知识。 Android中的界面是由一个个控件构成的，例如图片部分是一个图片控件(ImageView)，文字部分是一个文字控件(TextView)；同时，通过各种布局来决定各个控件的位置。 获取控件后，即可对控件进行点击，滑动，输入文本等操作。获取控件操作请阅读 获取控件操作 部分 //这里的sendButton就是一个控件对象，可以对控件对象进行各种操作 let sendButton = new UiSelector().text(\"发送\").findOne(); if(sendButton){ sendButton.click(); } click() 返回 {Boolean} 返回是否点击成功（需要注意的是，返回成功只能说明无障碍已经将点击成功发送到了控件，但是不能确保控件被点击了，返回失败则一定没有点击成功） 点击控件 let sendButton = new UiSelector().text(\"发送\").findOne(); if(sendButton){ sendButton.click(); } longClick() 返回 {Boolean} 返回是否点击成功 点击控件 let sendButton = new UiSelector().text(\"发送\").findOne(); if(sendButton){ sendButton.longClick(); } scrollForward() 返回 {Boolean} 返回是否滑动成功 向前滑动控件，将会让界面下方的节点往上滚动或者右边的节点往左滚动 scrollBackward() 返回 {Boolean} 返回是否滑动成功 向后滑动控件，将会让界面上方的节点往下滚动或者左边的节点往右滚动 setSelection(startPosition, endPosition) startPosition {number} 起始位置 endPosition {number} 结束位置 返回 {Boolean} 返回是否成功 选中文本内容 copy() 返回 {Boolean} 返回是否成功 复制选中的文本内容 let et = new UiSelector().className(\"EditText\").findOne(); //选中前两个字 et.setSelection(0, 2); //对选中内容进行复制 if(et.copy()){ toast(\"复制成功\"); }else{ toast(\"复制失败\"); } cut() 返回 {boolean} 返回是否成功 对输入框文本的选中内容进行剪切，并返回是否操作成功。 该函数只能用于输入框控件，并且当前输入框控件有选中的文本。可以通过setSelection()函数来设置输入框选中的内容。 paste() 返回 {boolean} 返回是否成功 粘贴内容到文本框 System.setClip(\"DeekeScript\");//将字符串“DeekeScript”粘贴到文本框 let obj = new UiSelector().className(\"EditText\").findOne(); obj.paste(); focus() 返回 {boolean} 返回是否成功 获取焦点。 let obj = new UiSelector().className(\"EditText\").findOne(); obj.focus(); setText(text) text {string} 输入参数 返回 {boolean} 返回是否成功 将字符串“text”输入到文本框 let obj = new UiSelector().className(\"EditText\").findOne(); obj.setText(\"DeekeScript\");//将字符串“DeekeScript”输入到文本框 find(uiSelector) uiSelector {UiSelector} 要查找的内容 返回 {UiObject[]|null} 返回查找到的控件对象 在当前的控件下查找某些控件，查找符合UiSelector过滤器条件的控件 let obj = new UiSelector().className(\"name\").findOne(); let uiObjects = obj.find(new UiSelector().className(\"EditText\"));//查找obj下面的所有输入框控件 //查找obj所有子节点中的输入框控件 let uiObjects2 = obj.children().find(new UiSelector().className(\"EditText\")); findOne(uiSelector) uiSelector {UiSelector} 要查找的内容 返回 {UiObject|null} 返回查找到的控件对象 同find(uiSelector)，但是findOne只返回一个符合条件的控件 let obj = new UiSelector().className(\"name\").findOne(); let uiObject = obj.findOne(new UiSelector().className(\"EditText\"));//查找obj下面的第一个输入框控件 bounds() 返回 {Rect} 返回当前控件的位置信息 let obj = new UiSelector().className(\"EditText\").findOne(); let rect = obj.bounds(); //输出 左边距、上边距、右边距、下边距、高度、宽度 console.log(rect.left, rect.top, rect.right, rect.bottom, rect.height(), rec.width()); id() 返回 {string} 返回当前控件的id let obj = new UiSelector().id(\"p2\").findOne(); let str = obj.id();//查找viewIdResourceName的值，输出p2 text() 返回 {string} 返回当前控件的text内容 let obj = new UiSelector().id(\"p2\").findOne(); let str = obj.text();//控件的text属性获取 desc() 返回 {string} 返回当前控件的contentDescription内容 let obj = new UiSelector().id(\"p2\").findOne(); let str = obj.desc();//控件的contentDescription属性获取 children() 返回 {UiObject[]|null} 返回当前控件的所有子控件对象，需要和length、getChildren方法联合使用 let obj = new UiSelector().id(\"p2\").findOne(); let children = obj.children(); for(let i = 0; i getChildren(index) 返回 {UiObject|null} 需要和children方法一起使用 length() 返回 {number} 返回子控件数量 parent() 返回 {UiObject} 返回当前控件的父控件对象 let obj = new UiSelector().id(\"p2\").findOne(); let parent = obj.parent();//子控件内容 getDrawingOrder() 返回 {number} 层级 返回当前控件的 绘制层级 let obj = new UiSelector().id(\"p2\").findOne(); let index = obj.getDrawingOrder();//控件绘制层级 isClickable() 返回 {boolean} 是否可以点击，类似的方法还有 方法 作用 isSelected() 判断控件是否被选中（如复选框） isLongClickable() 判断控件是否支持长按事件 isClickable() 判断控件是否可点击 isEditable() 判断控件是否可编辑（如文本框） isFocusable() 判断控件是否可获得焦点 isEnabled() 判断控件是否启用 isPassword() 判断控件是否为密码输入框 isScrollable() 判断控件是否可滚动 isVisibleToUser() 判断控件是否对用户可见 isCheckable() 判断控件是否可选中（如复选框） isChecked() 判断控件是否已选中（如复选框） setClickable(bool) 返回 {void} 设置是否可以点击，类似的方法还有 方法 作用 setLongClickable() 设置控件是否支持长按事件 setEditable() 设置控件是否可编辑（如文本框） setEnabled() 设置控件是否启用 setChecked() 设置控件是否选中（如复选框） setSelected() 设置控件是否被选中（如复选框） setFocusable() 设置控件是否可获得焦点 setFocused() 设置控件是否已获得焦点 setPassword() 设置控件是否为密码输入框 setVisibleToUser() 设置控件是否对用户可见 Copyright © script.deeke.top 2024 all right reserved，powered by Gitbook该文章修订时间： 2025-03-05 12:01:11 "},"advance/dialogs.html":{"url":"advance/dialogs.html","title":"弹窗","keywords":"","body":"弹窗 弹窗主要分为两类，一类当前APP在前台运行，请使用Dialogs弹窗；如果APP已经在后台启动了，Dialogs弹窗将会无法弹出。此时可以使用FloatDialogs弹窗（基于悬浮窗实现，需要开启悬浮窗权限） Dialogs弹窗 show(title, content) str {string} 弹窗标题 content {string|undefined} 弹窗内容，可以不填 返回 void 弹出弹窗 Dialogs.show(\"恭喜你，弹窗成功弹出\"); Dialogs.show(\"温馨提示\", \"恭喜你，弹窗成功弹出\"); input(title, value='') str {string} 弹窗标题 value {string|number} 输入框默认值，可以为空 返回 void 弹出弹窗 let count = Dialogs.input(\"请设置操作次数：\", 5); console.log(count); let account = Dialogs.input(\"请设置账号：\"); console.log(account); confirm(title, content, func) str {string} 弹窗标题 content {string} 说明 func {function} 点击确定或者取消之后，执行的方法 返回 void 弹出弹窗 Dialogs.confirm(\"提示\", \"确定执行吗？\", (result) => { if(result){ console.log('点击了确定'); }else{ console.log('点击了取消'); } }); FloatDialogs弹窗 show(title, content='') str {string} 弹窗标题 content {string} 弹窗内容 返回 void 后台弹出弹窗，但是需要开启悬浮窗权限 //heart.js主要启动一个定时器setInterval，每间隔几秒钟往服务器发送当前App的状态 FloatDialogs.show(\"恭喜你，弹窗成功弹出\"); FloatDialogs.show(\"温馨提示\", \"恭喜你，弹窗成功弹出\"); Copyright © script.deeke.top 2024 all right reserved，powered by Gitbook该文章修订时间： 2025-03-05 12:01:11 "},"advance/engines/engines.html":{"url":"advance/engines/engines.html","title":"Engines","keywords":"","body":"Engines 你可以把Engines理解为JavaScript运行时的管理器。有时候你需要在当前脚本环境中开启一个新的运行时来执行另外的JavaScript脚本（完全脱离当前JavaScript环境的上下文，而且不阻塞当前JavaScript代码运行），这个时候就需要使用Engines。 当然，在一些时候，如果你想彻底关闭JavaScript运行时，也是通过Engines来关闭的。 executeScript(filename) filename {string} 要执行的JS文件地址 必须为相对项目根目录的地址，非当前文件的相对地址 返回 {Thread} //heart.js主要启动一个定时任务，每间隔几秒钟往服务器发送当前App的状态 Engines.executeScript(\"script/task/heart.js\");//心跳脚本，监测App的在线状态 //特别说明，即使当前脚本终止运行了，heart.js依旧会继续运行 //如果需要关闭heart.js，可以使用 Engines.closeAll方法来操作; executeScriptStr(name, script) name {string} 脚本名称，自定义；实际中的任务名称，用于排查故障的时候使用 script {string} 要执行的脚本内容 返回 {Thread} 在新的环境中执行JavaScript，新的环境会开启新的堆栈空间，不会和当前的脚本有任何关联，是完全独立的。 //heart.js主要启动一个定时器setInterval，每间隔几秒钟往服务器发送当前App的状态 Engines.executeScript(\"My first DeekeScript\", \"console.log('My first DeekeScript');\"); closeAll() 建议在脚本运行完成后进行关闭，否则可能会出现内存泄漏 关闭JavaScript运行时和运行时所在的线程 Engines.closeAll();//关闭所有脚本运行时，当前脚本所在运行时也会被结束 Copyright © script.deeke.top 2024 all right reserved，powered by Gitbook该文章修订时间： 2025-03-05 12:01:11 "},"advance/thread.html":{"url":"advance/thread.html","title":"多线程-Thread","keywords":"","body":"多线程-Thread 2.0版本即将上线 相信富有经验的开发者，会发现很多工具都有提供多线程支持；因为很多时候，我们需要同时执行两个操作（比如，采集直播间弹幕的时候，又要实时获取在线人数）；这个时候使用多线程的方式可以更好地满足我们的需求。DeekeScript本身也是支持多线程的； 还可以使用Engines来实现多线程效果 多线程使用 let obj = { run: function () { console.log('线程'); } } new java.lang.Thread(new java.lang.Runnable(obj)).start(); for(let i = 0; i 其他使用多线程的方法 let obj = { run: function () { console.log('线程'); } } //注意java.lang.Thread和java.lang.Runnable外层不需要引号 let javaImporterTest = JavaImporter(java.lang.Thread, java.lang.Runnable); with(javaImporterTest){ new Thread(new Runnable(obj)).start(); } Copyright © script.deeke.top 2024 all right reserved，powered by Gitbook该文章修订时间： 2025-03-05 12:01:11 "},"advance/module.html":{"url":"advance/module.html","title":"模块","keywords":"","body":"module - 模块 在很多时候，我们的应用可能不止1个JavaScript文件就能实现的，尤其是在构建复杂应用的时候。 在DeekeScript中，可以轻松通过import方法来加载JavaScript文件。下面是一个实例： 注意：如果使用Typescript开发，可以使用Typescript的模块导入语法 require //项目文件结构如下：项目跟目录下有一个js文件夹和一个task文件夹 //js文件夹中包含了我们需要import的文件，task文件里面有一个dy_toker.js文件 //下面我们在dy_toker.js文件中引用js文件夹下面的a.js和b.js // |> js // | - a.js // | - b.js // |> task // | - dy_toker.js // |DeekeScript.json // js/a.js文件代码如下 export let a = { name: \"我是a.js\", getName(){ return this.name; } } module.exports = a; //dy_toker.js代码如下 特别说明，路径是相对于项目根目录的路径 let a = require('js/a.js');//相对于系统根目录路径 console.log(a.getName());//输出 “我是a.js” Copyright © script.deeke.top 2024 all right reserved，powered by Gitbook该文章修订时间： 2025-03-05 12:01:11 "},"advance/encryption.html":{"url":"advance/encryption.html","title":"加解密","keywords":"","body":"加解密 Encrypt 本模块主要囊括了一些场景的加密方式，和一些编码方式 md5(str) str {string} 加密前的字符串 返回 {string} 加密后的字符串 md5加密 console.log(Encrypt.md5('DeekeScript'));//输出：82e431569749c90ab31cfac2a9a3c4c3 sha1(str) str {string} 加密前的字符串 返回 {string} 加密后的字符串 sha1加密 sha256(str) str {string} 加密前的字符串 返回 {string} 加密后的字符串 sha256加密 base64Encode(str) str {string} 需要编码的字符串 返回 {string} base64编码字符串 base64Decode(str) str {string} base64Encode后的字符串 返回 {string} base64解密后的字符串 aesCbcEncode(key, iv, str) key {string} iv {string} str {string} 需要加密的内容 返回 {string} 加密后的内容 采用AES-CBC加密 let iv = Encrypt.generateIv(); let key = \"DeekeScript\"; let encodeStr = Encrypt.aesCbcEncode(key, iv, str); console.log(encodeStr);//输出加密后的内容 aesCbcDecode(key, iv, encodeStr) key {string} iv {string} str {string} 需要被解密的内容 返回 {string} 解密后的内容 采用AES-CBC模式解密 let iv = Encrypt.generateIv();//替换成实际的iv let key = \"DeekeScript\"; let str = Encrypt.aesCbcEncode(key, iv, encodeStr); console.log(encodeStr);//输出加密后的内容 Copyright © script.deeke.top 2024 all right reserved，powered by Gitbook该文章修订时间： 2025-03-05 12:01:11 "},"advance/photoAndColor.html":{"url":"advance/photoAndColor.html","title":"图片与颜色","keywords":"","body":"图片与颜色 图片识别 2.0版本即将上线 颜色识别 2.0版本即将上线 Copyright © script.deeke.top 2024 all right reserved，powered by Gitbook该文章修订时间： 2025-03-05 12:01:11 "},"advance/extension/extension.html":{"url":"advance/extension/extension.html","title":"扩展","keywords":"","body":"扩展 DeekeScript将JavaScript运行在Android环境中，很多时候我们需要使用Java的一些类来实现一些能力，从而弥补JavaScript的一些不足。 直接使用java提供的类 可以参考线程 let javaString = new java.lang.String('Java'); console.log(javaString);//输出：\"Java\" console.log(java.lang.Math.PI);//输出：\"3.141592653589793\" console.log(new java.util.Date());//输出：\"Tue Jan 14 10:52:55 CST 2025\" let f = new java.io.File(\"test.txt\"); console.log(f.exists());// false let Files = java.nio.file.Files; let path = java.nio.file.Paths.get('example.txt'); console.log(Files.exists(path));//输出：false 使用JavaImporter 下面以线程使用为例 let obj = { run: function () { console.log('线程'); } } //注意java.lang.Thread和java.lang.Runnable外层不需要引号 let javaImporterTest = JavaImporter(java.lang.Thread, java.lang.Runnable); with(javaImporterTest){ new Thread(new Runnable(obj)).start(); } 使用Packages导入模块 var Files = Packages.java.nio.file.Files; var path = Packages.java.nio.file.Paths.get('example.txt'); console.log(Files.exists(path));//输出：false Copyright © script.deeke.top 2024 all right reserved，powered by Gitbook该文章修订时间： 2025-03-05 12:01:11 "},"backendApi/activationCode.html":{"url":"backendApi/activationCode.html","title":"后端接口","keywords":"","body":"后端接口 激活码逻辑已经内嵌在DeekeScript中，开发者只需实现对应后端接口即可 接口验证 为了保证接口的安全性，DeekeScript客户端请求接口时，会携带以下字段： $android_id = $_POST['android_id']; $secret = $_POST['secret']; $timestamp = $_POST['timestamp']; $token = $_POST['token'];//仅激活的时候会携带，其他接口不会携带token //后端拿到参数后，需要做下面的验证 //下面的token激活码是根据android_id在后端数据库中查询的 if ($secret !== md5($android_id . $res->getAttr(\"token\") . $timestamp)) { return ['code' => 1, 'msg' => '激活码已失效'];//激活失效了 } 激活 需要在DeekeScript.json配置文件中配置Uri请求地址。如果用户不填写激活码，则运行DeekeScript上的业务功能（开发者开发的功能）时会提示输入激活码 DeekeScript请求： Request Method: POST Content-Type: application/json 请求地址：/dke/login 请求参数： { \"token\": \"djhcn8dhfjwie7dbs9ikqlchdn76shbc\", \"android_id\": \"sdfsd-dsfdsa-fdasfdas\" //用户卸载App或者恢复出厂设置后，此ID将会变化 } 你的接口需要返回如下json内容： //激活成功 {code: 0, msg: \"成功\", token_time: \"29.99天后过期\", success: true, data: []} //激活失败 {code: 1, success: false, msg: \"激活失败\"} 激活状态检查 需要在DeekeScript.json配置文件中配置Uri请求地址，DeekeScript每次运行业务功能（开发者开发的功能）都会请求一次此接口，如果返回失败，则会提示用户对应的信息 DeekeScript请求： Request Method: POST Content-Type: application/json 请求地址：/dke/checkBind 请求参数： { \"timestamp\": 1793293729, \"secret\": \"djhcn8dhfjwie7dbs9ikqlchdn76shbc\", \"android_id\": \"sdfsd-dsfdsa-fdasfdas\" //用户卸载App或者恢复出厂设置后，此ID将会变化 } 你的接口需要返回如下json内容： //成功 {code: 0, msg: \"成功\", success: true, token_time: \"29.98天后过期\", data: []} //失败 {code: 1, msg: \"已过期\", success: false, data: []} 下面的接口请求参数同“激活状态检查” 百度AI大模型token获取接口 每次生成智能话术都会调用一次此接口，接口地址：/dke/getBaiduToken //成功返回如下 {code: 0, msg: \"成功\",success: true, access_token: \"xxxxxxxxxxxxxx\", data: []} //失败返回，可以通过此接口限制调用次数 {code: 1, msg: \"智能话术已使用完~\",success: false, data: []} 配置接口 请求地址：/dkee/config { code: 0, msg: \"成功\", success: true, data: { ad: { app_open_url => '开屏广告图片地址，如：https://xx.xx.xx/1.png', app_pay_ad_url => '支付宝支付入口广告图片地址，如：https://xx.xx.xx/2.png' }, role: [ label : \"角色名称，如：营销大师\", value : 1, content : \"智能体角色属性设定：你的角色是一个营销大师，xxxxxx\", ] } } 是否展示支付入口接口 接口地址：/alipay/getToken //返回成功，则不允许调用支付 {code: 0, msg: '不展示支付入口', success: true, data: []} //返回失败，可以支付 {code: 1, msg: '展示支付入口', success: false, data: []} 支付宝支付订单创建接口 接口地址：/alipay/createOrder //成功 { code: 0, msg: '成功', success: true, data: { params: '订单信息，字符串形式；支付宝返回的AlipayTradeAppPayResponse->body内容', order_no: 'xccxxvxxccxcx', } } //失败 {code: 1, msg: '支付失败', success: false, data: []} Copyright © script.deeke.top 2024 all right reserved，powered by Gitbook该文章修订时间： 2025-03-05 12:01:11 "},"code/encryption.html":{"url":"code/encryption.html","title":"代码混淆加密","keywords":"","body":"混淆加密 JavaScript代码混淆，主要是为了防止代码被反编译，从而达到保护代码的目的。目前Typescript模式下，默认采用了webpack-obfuscator插件，如果需要关闭，请移除[new WebpackObfuscator]相关代码。 注意：开发模式下建议不开启压缩与加密，生产环境可以使用压缩与加密。同时还需要了解到复杂的加密会增加代码执行时间，降低代码运行效率。 webpack-obfuscator webpack-obfuscator 插件的目标是 代码混淆，它不仅压缩代码，还对代码的结构进行修改，使得代码变得更难以理解和逆向。这种混淆通常包括更复杂的技术，比如控制流扁平化、字符串加密、死代码注入等。 主要解决的问题： 代码混淆：通过改变代码的结构、变量名、函数名等，使代码更加难以阅读和理解。例如，变量名被替换成无意义的短字符（如 a, b, c 等），控制流被打乱，字符串被加密等。 字符串加密与提取：将代码中的字符串提取到数组中，并通过索引引用，这样可以避免直接查看源代码时轻松找到敏感信息。 控制流扁平化：通过改变代码的控制流，使代码变得更加复杂，并不直接按常规顺序执行。 死代码注入：向代码中插入一些永远不会执行的“死代码”，以增加分析和理解的难度。 适用场景： 代码保护：如果你希望保护代码免受逆向工程、剖析或窃取，特别是涉及到敏感业务逻辑或算法时，使用代码混淆是一种有效手段。 防止盗用：通过混淆技术，增加其他人复制或修改你的代码的难度。 高级混淆：如果你需要更复杂的混淆（如控制流扁平化、字符串加密等），webpack-obfuscator 提供了比 TerserPlugin 更强大的功能。 请使用Typescript模式，并配置项目根目录下面的webpack.config.js文件 plugins: [ new WebpackObfuscator({ compact: false, //代码压缩 不建议开启，否则代码错误很难排查 rotateStringArray: true, // 启用字符串数组混淆 controlFlowFlattening: true, // 控制流扁平化 deadCodeInjection: true, // 注入死代码 stringArray: true, // 启用字符串数组化 不能启用，否则rhino无法处理 stringArrayThreshold: 0.75, // 配置字符串数组化的阈值 disableConsoleOutput: false, // 禁用 console 输出 sourceMap: true, // 启用生成 sourcemap }), // 指定要混淆的文件 ] 代码混淆示例 const arr = [1, 2, 3]; // 自动抛出 RangeError，因为数组索引越界 192.168.1.3:8088 const value = arr[-1]; // TypeScript 会提示 `undefined`，但是在运行时会引发错误 function test() { let obj: any = {}; // 访问 null 时，会触发 TypeError console.log(obj.someMethod()); // TypeError: Cannot read property 'someMethod' of null } console.log(arr); test(); 加密后【未启用压缩】，如下： function a1_0x1ec2(_0x5231f6, _0x2af77f) { var _0x5a5af3 = a1_0x5a5a(); return a1_0x1ec2 = function (_0x1ec206, _0x34fa78) { _0x1ec206 = _0x1ec206 - 0x179; var _0x37087a = _0x5a5af3[_0x1ec206]; return _0x37087a; }, a1_0x1ec2(_0x5231f6, _0x2af77f); } function a1_0x5a5a() { var _0x1d7dd5 = [ '518VpvfkM', '23080UeErzH', '1602955bwJgKL', '342gUFXyW', '12dsfZzM', '1806525wDAlMV', 'SbsGP', 'log', '7117510QcznoC', '2088666fYozPk', '5582424BzocDR', '1339PzFigh', 'someMethod' ]; a1_0x5a5a = function () { return _0x1d7dd5; }; return a1_0x5a5a(); } (function (_0x505f31, _0x8f1e42) { var _0x4cc1b2 = a1_0x1ec2, _0x21a0db = _0x505f31(); while (!![]) { try { var _0x204909 = parseInt(_0x4cc1b2(0x184)) / 0x1 * (parseInt(_0x4cc1b2(0x179)) / 0x2) + -parseInt(_0x4cc1b2(0x17c)) / 0x3 * (-parseInt(_0x4cc1b2(0x17a)) / 0x4) + parseInt(_0x4cc1b2(0x17b)) / 0x5 * (-parseInt(_0x4cc1b2(0x17d)) / 0x6) + -parseInt(_0x4cc1b2(0x17e)) / 0x7 + -parseInt(_0x4cc1b2(0x183)) / 0x8 + parseInt(_0x4cc1b2(0x182)) / 0x9 + parseInt(_0x4cc1b2(0x181)) / 0xa; if (_0x204909 === _0x8f1e42) break; else _0x21a0db['push'](_0x21a0db['shift']()); } catch (_0x17c6b7) { _0x21a0db['push'](_0x21a0db['shift']()); } } }(a1_0x5a5a, 0x55c72), ((() => { 'use strict'; var _0x349cf0 = a1_0x1ec2, _0x4b0556 = { 'SbsGP': function (_0x2127e2) { return _0x2127e2(); } }; var _0x461321 = [ 0x1, 0x2, 0x3 ], _0x7f0d4c = _0x461321[-0x1]; function _0x27bef1() { var _0xd3ee64 = a1_0x1ec2, _0x353c31 = {}; console[_0xd3ee64(0x180)](_0x353c31[_0xd3ee64(0x185)]()); } console['log'](_0x461321), _0x4b0556[_0x349cf0(0x17f)](_0x27bef1); })())); //# sourceMappingURL=task/test.js.map //# sourceMappingURL=test.js.map Copyright © script.deeke.top 2024 all right reserved，powered by Gitbook该文章修订时间： 2025-03-05 12:01:11 "},"apk/apk.html":{"url":"apk/apk.html","title":"在线打包","keywords":"","body":"在线打包 在线打包 2.0版本即将发布 Copyright © script.deeke.top 2024 all right reserved，powered by Gitbook该文章修订时间： 2025-03-05 12:01:11 "},"backend/backend.html":{"url":"backend/backend.html","title":"管理后台支持","keywords":"","body":"管理后台支持 DeekeScript给企业用户提供了后台管理系统支持，可以轻松管理App的激活码，开通代理商等。 功能说明 系统管理员登录 代理商登录 创建代理商（通过分配点数控制代理商创建卡密） 代理商创建卡密（可以创建1天、3天、7天、30天、3月、6月、1年、2年使用期限的卡密） AI角色配置 AI角色秘钥配置 APP后台更新 开屏广告图片设置、支付广告图片设置 数据大屏 界面 Copyright © script.deeke.top 2024 all right reserved，powered by Gitbook该文章修订时间： 2025-03-05 12:01:11 "},"deeke/deeke.html":{"url":"deeke/deeke.html","title":"嘀客APP","keywords":"","body":"Deeke Deeke地址 https://github.com/DeekeScript/ad-deeke Deeke截图： 后台 Copyright © script.deeke.top 2024 all right reserved，powered by Gitbook该文章修订时间： 2025-03-05 12:01:11 "},"question/question.html":{"url":"question/question.html","title":"常见问题","keywords":"","body":"问题汇总 DeekeScript未来会支持其他UI模式吗？ 答：是的，DeekeScript目前对UI部分进行了强制的要求，后续会逐步推出不同的模版，乃至自定义ui的模式 DeekeScript未来会一直维护更新吗？ 答：是的，DeekeScript于2023年年底问世，主要是为了解决底层框架不稳定的问题，后续会持续增加功能，并且会修复历史存在的问题 DeekeScript官方如何联系？ 答：可以联系作者，微信号：DeekeScript DeekeScript未来会支持nodejs模式吗？ 答：短期内，DeekeScript不会去兼容nodejs模式 Copyright © script.deeke.top 2024 all right reserved，powered by Gitbook该文章修订时间： 2025-03-05 12:01:11 "},"question/accessibility.html":{"url":"question/accessibility.html","title":"无障碍问题","keywords":"","body":"无障碍问题 在无障碍程序设计过程中，我们和大家一样，遇到最多的问题，就是无障碍的不稳定，接下来主要介绍几个不稳定因素的起因和解决方案。 场景1：APP运行一段时间就挂掉了？ 原因1：目前Android对后台应用限制比较严格，尤其内存不足或者电量不足的时候，会对相关应用进行误杀。 解决方案：关闭手机其他应用、关闭省电模式功能（或者插电运行）、给应用加锁（具体的可以查看对应品牌机型的加锁方法）。 场景2：在页面A点击用户头像进入用户详情页，获取用户数据，最终失败 原因1：某些情况下，当前A页面可能存在多个id相同的头像控件，你的代码拿到的可能不是在当前界面上的控件，导致点击了其他控件 解决方案：增加判断，确保你要获取的id在当前界面，可以通过位置信息确保控件在大概位置（或者判断是否可见等） 原因2：某些情况下，点击头像控件失效了，但是系统确实点击了（这种情况常见于某些APP框架，DeekeScript中暂未发现） 解决方案：在点击的时候，尽可能使用控件的特性，假设控件的clickable为true，则直接使用obj.click()即可；或者发现它的父控件的clickable为true，则直接使用obj.parent().click()；只有在clickable为false的时候，才去使用系统提供的位置点击方法。 原因3：某些情况下被弹窗遮挡了，位置点击的时候跑到其他界面去了 解决方案：对APP的弹窗进行全局的监控，发现之后进行关闭。 原因4：进入A页面的时候，没有设置合理的等待时间，导致头像控件还未加载成功，导致点击失败 解决方案：增加页面的等待时间，如果对速度要求较高，可以先快速操作，发现失败后，再等待操作 场景3：可滑动的用户列表，对其每个用户进行操作时，经常因为返回次数不对，最终找不到用户而出错 原因1：操作用户的时候，国内某些APP框架可能手机卡顿导致返回没有执行（DeekeScript暂未发现） 解决方案：每次返回之后，做一个界面的判断，如果没有返回，则循环再返回 原因2：操作用户的时候，通过点击界面上的“返回”按钮返回，但是因为其他原因导致点击失败 解决方案：尽量使用系统全局的返回，不要使用APP提供的“返回”按钮返回 原因3：因为操作用户的过程中出错了，导致返回异常 解决方案：编写强壮的代码，每一步失败，都做到“心中有数”，然后执行对应的返回操作（或者在执行返回的时候，检测是否到了用户列表页） 场景4：因为某个功能的操作周期比较长，应用程序经常挂掉了 原因1：有时候，我们在开发一款新的APP的时候，经常会有一些超出我们预期的东西，比如：未知的弹窗，未知的界面等等（也包括手机来电等） 解决方案：遇到异常，可以退回到主界面（每退一次检查一次是否进入了主界面），然后再重新运行；当然如果没办法进入主界面，应该也可以进入其他默认的界面，或者自行对当前页面进行判断，然后执行对应操作 注意：尽量不要采用关闭APP，然后重启的方式，因为这种方式很难让客户接受（除非客户接受，并且必须这么做） 场景5：在评论列表或者用户列表出现死循环了 原因1：没有列表已经执行完做判断，或者因为某些原因导致一直在滑动列表 解决方案：对列表执行完成进行判断（DeekeScript中，可以获取对象的_addr属性，比如一次获取到了3个控件，把_addr进行保存，然后滑动之后，再进行读取，与前面的比对，如果相同则认为滑动完成） 对滑动进行判断，超出时间或者次数，进行异常处理 Copyright © script.deeke.top 2024 all right reserved，powered by Gitbook该文章修订时间： 2024-04-02 10:38:53 "},"INVITE.html":{"url":"INVITE.html","title":"招贤纳士","keywords":"","body":"招贤纳士 DeekeScript需要什么样的人才？ 热爱Coding，热爱生活 有一定的编程能力、文档编写能力 看好DeekeScript的未来 希望通过DeekeScript平台结识更多优秀的人 有较多的空闲时间（每周至少有8小时） 目前DeekeScript需要的技术人才有：测试工程师、后端工程师（PHP/NodeJs/Java等）、前端工程师、逆向工程师、全栈工程师、UI设计师、平面设计师等 为DeekeScript做出贡献，能获得什么？ 参与DeekeScript的重要事项的讨论 DeekeScript终身会员（1个终身免费账号） 介绍企业客户，可以获得20%分佣 基于DeekeScript开发的应用，优先展示（包括官网展示、本平台上的案例展示） 获得DeekeScript导师身份，从而提升自己的圈内声望 优秀者可以成为DeekeScript合伙人，可享受平台收入的季度分红 DeekeScript当前有哪些事情需要做？ 下面是当前DeekeScript需要做的工作，如果你有兴趣，可以联系我们 文档维护与更新 视频教程录制（至少使用DeekeScript开发过一个产品） Vscode插件更新与维护、包括代码提示等 开放平台的开发与维护 云市场的开发与维护 产品测试（包括DeekeScript以及其周边产品） 官网的开发维护与更新 旗下子产品Deeke的维护与更新 如何联系DeekeScript官方？ 微信扫码添加（能附带一份简历更佳，这样我们能更清晰地知道你擅长什么） Copyright © script.deeke.top 2024 all right reserved，powered by Gitbook该文章修订时间： 2025-03-05 12:01:11 "}}