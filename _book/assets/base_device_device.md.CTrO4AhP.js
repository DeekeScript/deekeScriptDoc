import{_ as a,c as i,o as r,ah as o}from"./chunks/framework.DhC5tf0O.js";const k=JSON.parse('{"title":"设备 - Device","description":"DeekeScript - 设备 - Device","frontmatter":{"title":"设备 - Device","description":"DeekeScript - 设备 - Device"},"headers":[],"relativePath":"base/device/device.md","filePath":"base/device/device.md"}'),t={name:"base/device/device.md"};function n(d,e,s,c,p,h){return r(),i("div",null,e[0]||(e[0]=[o('<h1 id="设备device" tabindex="-1">设备 - Device <a class="header-anchor" href="#设备device" aria-label="Permalink to “设备 - Device”">​</a></h1><p>Device对象，提供一些设备相关的方法。</p><h2 id="keepcpuawakeseconds" tabindex="-1">keepCpuAwake(seconds) <a class="header-anchor" href="#keepcpuawakeseconds" aria-label="Permalink to “keepCpuAwake(seconds)”">​</a></h2><p><strong>参数：</strong> <code>seconds {number}</code> 屏幕常量秒数</p><p><strong>返回：</strong> <code>{void}</code></p><p>息屏后，保持 CPU 唤醒，延时释放</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">keepCpuAwake</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">600</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//常量10分钟</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="releasecpuwakelock" tabindex="-1">releaseCpuWakeLock() <a class="header-anchor" href="#releasecpuwakelock" aria-label="Permalink to “releaseCpuWakeLock()”">​</a></h2><p><strong>返回：</strong> <code>{void}</code></p><p>释放CPU唤醒状态</p><h2 id="width" tabindex="-1">width() <a class="header-anchor" href="#width" aria-label="Permalink to “width()”">​</a></h2><p><strong>返回：</strong> <code>{number}</code> 返回宽度 单位为px</p><p>获取屏幕真实的宽度（像素值）；手机旋转方向后，依然会返回真实的宽度</p><h2 id="height" tabindex="-1">height() <a class="header-anchor" href="#height" aria-label="Permalink to “height()”">​</a></h2><p><strong>返回：</strong> <code>{number}</code> 返回宽度 单位为px</p><p>获取屏幕真实的高度（像素值）；手机旋转方向后，依然会返回真实的高度</p><h2 id="sdkint" tabindex="-1">sdkInt() <a class="header-anchor" href="#sdkint" aria-label="Permalink to “sdkInt()”">​</a></h2><p><strong>返回：</strong> <code>{number}</code></p><p>返回SDK的版本号</p><h2 id="device" tabindex="-1">device() <a class="header-anchor" href="#device" aria-label="Permalink to “device()”">​</a></h2><p><strong>返回：</strong> <code>{string}</code></p><blockquote><p>请注意，这个返回值并不是设备的市场名称（如&quot;华为荣耀V30&quot;）、品牌名（如&quot;华为&quot;）或型号名（如&quot;V30&quot;）。它更偏向于一个内部或技术名称，用于在Android框架和开发中识别不同的设备硬件。</p></blockquote><p>获取设备的硬件标识，比如华为荣耀，可能返回&quot;honor_xxx&quot;的字符串</p><h2 id="androidversion" tabindex="-1">androidVersion() <a class="header-anchor" href="#androidversion" aria-label="Permalink to “androidVersion()”">​</a></h2><p><strong>返回：</strong> <code>{string}</code></p><p>返回Android的版本号</p><h2 id="createuuid" tabindex="-1">createUuid() <a class="header-anchor" href="#createuuid" aria-label="Permalink to “createUuid()”">​</a></h2><p><strong>返回：</strong> <code>{string}</code></p><blockquote><p>由于Android日益严格的权限管控，导致设备的唯一标识不太方便获取，本系统提供了一个uuid生成方案，来解决设备识别问题；建议在开发者在用户激活设备之后，使用此方法创建一个uuid（创建前，请使用getUuid检查是否存在）；后续将这个唯一标识和激活码绑定；</p></blockquote><blockquote><p>注意：App卸载后、设备恢复出厂等操作，将会让生成的uuid丢失</p></blockquote><p>设置设备的随机的uuid</p><h2 id="getuuid" tabindex="-1">getUuid() <a class="header-anchor" href="#getuuid" aria-label="Permalink to “getUuid()”">​</a></h2><p><strong>返回：</strong> <code>{string}</code></p><p>获取设备的随机的uuid</p><h2 id="gettoken" tabindex="-1">getToken() <a class="header-anchor" href="#gettoken" aria-label="Permalink to “getToken()”">​</a></h2><p><strong>返回：</strong> <code>{string}</code></p><p>获取设备激活码（用户激活后，才有次值）</p><h2 id="getattrkey" tabindex="-1">getAttr(key) <a class="header-anchor" href="#getattrkey" aria-label="Permalink to “getAttr(key)”">​</a></h2><p><strong>参数：</strong> <code>key {string}</code></p><p><strong>返回：</strong> <code>{string}</code></p><p>获取设备其他数据，也可以使用getAttr(&#39;token&#39;)代替getToken方法</p><h2 id="isscreenon" tabindex="-1">isScreenOn() <a class="header-anchor" href="#isscreenon" aria-label="Permalink to “isScreenOn()”">​</a></h2><p><strong>返回：</strong> <code>{boolean}</code></p><p>获取屏幕是否亮屏</p><h2 id="brand" tabindex="-1">brand() <a class="header-anchor" href="#brand" aria-label="Permalink to “brand()”">​</a></h2><p><strong>返回：</strong> <code>{string}</code></p><p>获取设备的品牌信息；对于华为（Huawei）的设备，它会返回 &quot;huawei&quot;。</p><h2 id="os" tabindex="-1">os() <a class="header-anchor" href="#os" aria-label="Permalink to “os()”">​</a></h2><p><strong>返回：</strong> <code>{string}</code></p><p>获取设备操作系统信息；对于大多数标准的 Android 设备，Build.VERSION.BASE_OS 通常返回 &quot;android&quot;。然而，在某些设备或定制 Android 版本中，制造商可能会为其定制的基础操作系统设置不同的名称或标识符。</p><h2 id="model" tabindex="-1">model() <a class="header-anchor" href="#model" aria-label="Permalink to “model()”">​</a></h2><p><strong>返回：</strong> <code>{string}</code></p><p>获取设备的model信息；如：荣耀特定设备的型号名称，如 &quot;Honor V30&quot; 或类似的字符串</p><h2 id="codename" tabindex="-1">codename() <a class="header-anchor" href="#codename" aria-label="Permalink to “codename()”">​</a></h2><p><strong>返回：</strong> <code>{string}</code></p><p>获取设备的代号信息；如：荣耀特定设备的代号，如 &quot;VOG-AL00&quot; 或类似的字符串</p>',56)]))}const g=a(t,[["render",n]]);export{k as __pageData,g as default};
