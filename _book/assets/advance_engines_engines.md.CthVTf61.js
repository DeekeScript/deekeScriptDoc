import{_ as n,c as l,o as t,j as s,ah as a,a as e}from"./chunks/framework.BJ6Xb1OP.js";const E=JSON.parse('{"title":"Engines","description":"DeekeScript - Engines","frontmatter":{"title":"Engines","description":"DeekeScript - Engines"},"headers":[],"relativePath":"advance/engines/engines.md","filePath":"advance/engines/engines.md"}'),p={name:"advance/engines/engines.md"};function r(h,i,k,c,d,o){return t(),l("div",null,i[0]||(i[0]=[s("h1",{id:"engines",tabindex:"-1"},[e("Engines "),s("a",{class:"header-anchor",href:"#engines","aria-label":"Permalink to “Engines”"},"​")],-1),s("p",null,"你可以把Engines理解为JavaScript运行时的管理器。有时候你需要在当前脚本环境中开启一个新的运行时来执行另外的JavaScript脚本（完全脱离当前JavaScript环境的上下文，而且不阻塞当前JavaScript代码运行），这个时候就需要使用Engines。",-1),s("p",null,"当然，在一些时候，如果你想彻底关闭JavaScript运行时，也是通过Engines来关闭。",-1),s("p",null,[s("code",null,"目前Engines运行时是通过线程池的方式实现，并且有数量限制，因此不能无限开启Engines，否则会报错")],-1),s("h2",{id:"executescript-filename",tabindex:"-1"},[e("executeScript(filename) "),s("a",{class:"header-anchor",href:"#executescript-filename","aria-label":"Permalink to “executeScript(filename)”"},"​")],-1),s("blockquote",null,[s("p",null,"filename {string} 要执行的JS文件地址 必须为相对项目根目录的地址，非当前文件的相对地址"),s("p",{Thread:""},"返回")],-1),a(`<div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//heart.js主要启动一个定时任务，每间隔几秒钟往服务器发送当前App的状态</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Engines.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executeScript</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;script/task/heart.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//心跳脚本，监测App的在线状态</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//保持当前线程不关闭，否则上面的代码也会关闭，导致心跳任务也立即关闭</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;保持当前线程活跃&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//如果你需要一段时间后关闭心跳，可以使用Engines.closeOther();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Engines.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">closeOther</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="executescriptstr-name-script" tabindex="-1">executeScriptStr(name, script) <a class="header-anchor" href="#executescriptstr-name-script" aria-label="Permalink to “executeScriptStr(name, script)”">​</a></h2>`,2),s("blockquote",null,[s("p",null,"name {string} 脚本名称，自定义；实际中的任务名称，用于排查故障的时候使用"),s("p",null,"script {string} 要执行的脚本内容"),s("p",{Thread:""},"返回")],-1),a(`<p>在新的环境中执行JavaScript，新的环境会开启新的堆栈空间，不会和当前的脚本有任何关联，是完全独立的。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//heart.js主要启动一个定时器setInterval，每间隔几秒钟往服务器发送当前App的状态</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Engines.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executeScriptStr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;My first DeekeScript&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;console.log(&#39;My first DeekeScript&#39;);&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="closeall" tabindex="-1">closeAll() <a class="header-anchor" href="#closeall" aria-label="Permalink to “closeAll()”">​</a></h2><p>关闭所有正在运行的脚本（包括子脚本、定时器、socket等）；注意不包括hooks启动的脚本</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Engines.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">closeAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//关闭所有脚本运行时，当前脚本所在运行时也会被结束</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="closeother" tabindex="-1">closeOther() <a class="header-anchor" href="#closeother" aria-label="Permalink to “closeOther()”">​</a></h2><p>关闭除了当前脚本之外的其他脚本（包括脚本里面的子脚本、定时器、socket等）</p><blockquote><p>如果你想在当前脚本执行一段时间后，进入休眠一段时间，并且在休眠的时间内执行其他脚本；休眠完成后，立马关闭其他脚本，就需要使用此方法</p></blockquote><h2 id="closehook" tabindex="-1">closeHook() <a class="header-anchor" href="#closehook" aria-label="Permalink to “closeHook()”">​</a></h2><p>关闭hooks启动的脚本</p><blockquote><p>如果你在hooks里面启动了持续保活的脚本，可以使用这个方法关闭hooks脚本</p></blockquote>`,11)]))}const u=n(p,[["render",r]]);export{E as __pageData,u as default};
