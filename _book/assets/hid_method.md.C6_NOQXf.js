import{_ as a,l as o,n as t,q as n}from"./chunks/theme.CCHGrgzN.js";const b=JSON.parse('{"title":"Hid方法","description":"DeekeScript - Hid方法","frontmatter":{"title":"Hid方法","description":"DeekeScript - Hid方法"},"headers":[],"relativePath":"hid/method.md","filePath":"hid/method.md"}'),i={name:"hid/method.md"};function r(d,e,s,l,c,p){return t(),o("div",null,e[0]||(e[0]=[n('<h1 id="hid方法" tabindex="-1">Hid方法 <a class="header-anchor" href="#hid方法" aria-label="Permalink to “Hid方法”">​</a></h1><h2 id="swipe-x1-y1-x2-y2-step-down-timeout-up-timeout-timeout-up-down-times" tabindex="-1">swipe(x1, y1, x2, y2, step, down_timeout, up_timeout, timeout, up_down_times) <a class="header-anchor" href="#swipe-x1-y1-x2-y2-step-down-timeout-up-timeout-timeout-up-down-times" aria-label="Permalink to “swipe(x1, y1, x2, y2, step, down_timeout, up_timeout, timeout, up_down_times)”">​</a></h2><p><strong>参数：</strong></p><ul><li><code>x1 {number}</code> 按下点的X1坐标</li><li><code>y1 {number}</code> 按下点的Y1坐标</li><li><code>x2 {number}</code> 移动到点的X2坐标</li><li><code>y2 {number}</code> 移动到的Y2坐标</li><li><code>step {number}</code> 单步移动距离(5-60建议,越大越快)(可选 默认20-51随机)</li><li><code>down_timeout {number}</code> 按下后等待多久开始滑动(可选 默认100-180随机)</li><li><code>up_timeout {number}</code> 滑动完等多久抬起(可选 默认100-180随机)</li><li><code>timeout {number}</code> 每个步长中间延时(可选 默认8-15随机)</li><li><code>up_down_times {number}</code> 抬起次数(一般不需要)(可选 默认1)</li></ul><p><strong>返回：</strong> <code>{boolean}</code></p><p>模拟直线滑动</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Hid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">swipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1050</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="swipex-x1-y1-x2-y2-radian-step-down-timeout-up-timeout-timeout-up-down-times" tabindex="-1">swipex(x1, y1, x2, y2, radian, step, down_timeout, up_timeout, timeout, up_down_times) <a class="header-anchor" href="#swipex-x1-y1-x2-y2-radian-step-down-timeout-up-timeout-timeout-up-down-times" aria-label="Permalink to “swipex(x1, y1, x2, y2, radian, step, down_timeout, up_timeout, timeout, up_down_times)”">​</a></h2><p><strong>参数：</strong></p><ul><li><code>x1 {number}</code> 按下点的X1坐标</li><li><code>y1 {number}</code> 按下点的Y1坐标</li><li><code>x2 {number}</code> 移动到点的X2坐标</li><li><code>y2 {number}</code> 移动到的Y2坐标</li><li><code>radian {number}</code> 1-500建议,越大弧度越大推荐10-100(可选:默认10-100)</li><li><code>step {number}</code> 单步移动距离(5-60建议,越大越快)(可选 默认20-51随机)</li><li><code>down_timeout {number}</code> 按下后等待多久开始滑动(可选 默认100-180随机)</li><li><code>up_timeout {number}</code> 滑动完等多久抬起(可选 默认100-180随机)</li><li><code>timeout {number}</code> 每个步长中间延时(可选 默认8-15随机)</li><li><code>up_down_times {number}</code> 抬起次数(一般不需要)(可选 默认1)</li></ul><p><strong>返回：</strong> <code>{boolean}</code></p><p>仿真曲线滑动</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Hid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">swipex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1050</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="ver" tabindex="-1">ver() <a class="header-anchor" href="#ver" aria-label="Permalink to “ver()”">​</a></h2><p><strong>返回：</strong> <code>{double}</code> 插件版本号</p><p>获取插件版本号</p><h2 id="home" tabindex="-1">home() <a class="header-anchor" href="#home" aria-label="Permalink to “home()”">​</a></h2><p><strong>返回：</strong> <code>{boolean}</code></p><p>模拟按下Home键。</p><h2 id="recents" tabindex="-1">recents() <a class="header-anchor" href="#recents" aria-label="Permalink to “recents()”">​</a></h2><p><strong>返回：</strong> <code>{boolean}</code></p><p>模拟按下任务键。</p><h2 id="back" tabindex="-1">back() <a class="header-anchor" href="#back" aria-label="Permalink to “back()”">​</a></h2><p><strong>返回：</strong> <code>{boolean}</code></p><p>模拟按下返回键。</p><h2 id="back1" tabindex="-1">back1() <a class="header-anchor" href="#back1" aria-label="Permalink to “back1()”">​</a></h2><p><strong>返回：</strong> <code>{boolean}</code></p><p>另一种方式模拟按下返回键。</p><h2 id="touchdown-x-y" tabindex="-1">touchDown(x, y) <a class="header-anchor" href="#touchdown-x-y" aria-label="Permalink to “touchDown(x, y)”">​</a></h2><p><strong>参数：</strong></p><ul><li><code>x {number}</code> 触摸点的X坐标</li><li><code>y {number}</code> 触摸点的Y坐标</li></ul><p><strong>返回：</strong> <code>{boolean}</code></p><p>模拟手指按下事件。</p><h2 id="touchmove-int-x-int-y" tabindex="-1">touchMove(int x, int y) <a class="header-anchor" href="#touchmove-int-x-int-y" aria-label="Permalink to “touchMove(int x, int y)”">​</a></h2><p><strong>参数：</strong></p><ul><li><code>x {number}</code> 触摸点的X坐标</li><li><code>y {number}</code> 触摸点的Y坐标</li></ul><p><strong>返回：</strong> <code>{boolean}</code></p><p>模拟手指移动事件。</p><h2 id="touchup-int-x-int-y" tabindex="-1">touchUp(int x, int y) <a class="header-anchor" href="#touchup-int-x-int-y" aria-label="Permalink to “touchUp(int x, int y)”">​</a></h2><p><strong>参数：</strong></p><ul><li><code>x {number}</code> 触摸点的X坐标</li><li><code>y {number}</code> 触摸点的Y坐标</li></ul><p><strong>返回：</strong> <code>{boolean}</code></p><p>模拟手指抬起事件。</p><h2 id="touchup" tabindex="-1">touchUp() <a class="header-anchor" href="#touchup" aria-label="Permalink to “touchUp()”">​</a></h2><p><strong>返回：</strong> <code>{boolean}</code></p><p>模拟手指抬起事件，使用最后一次记录的触摸位置。</p><h2 id="touchup2" tabindex="-1">touchUp2() <a class="header-anchor" href="#touchup2" aria-label="Permalink to “touchUp2()”">​</a></h2><p><strong>返回：</strong> <code>{boolean}</code></p><p>模拟手指抬起事件，尝试多次抬起。</p><h2 id="tap-int-x-int-y" tabindex="-1">tap(int x, int y) <a class="header-anchor" href="#tap-int-x-int-y" aria-label="Permalink to “tap(int x, int y)”">​</a></h2><p><strong>参数：</strong></p><ul><li><code>x {number}</code> 触摸点的X坐标</li><li><code>y {number}</code> 触摸点的Y坐标</li></ul><p><strong>返回：</strong> <code>{boolean}</code></p><p>模拟手指点击事件。</p><h2 id="getname" tabindex="-1">getName() <a class="header-anchor" href="#getname" aria-label="Permalink to “getName()”">​</a></h2><p><strong>返回：</strong> <code>{String}</code></p><p>获取已连接蓝牙设备的名称。</p><h2 id="keydown-code" tabindex="-1">keyDown(code) <a class="header-anchor" href="#keydown-code" aria-label="Permalink to “keyDown(code)”">​</a></h2><p><strong>参数：</strong> <code>code {number}</code> 键码</p><p><strong>返回：</strong> <code>{boolean}</code></p><p>模拟按键按下事件。</p><h2 id="keyup-code" tabindex="-1">keyUp(code) <a class="header-anchor" href="#keyup-code" aria-label="Permalink to “keyUp(code)”">​</a></h2><p><strong>参数：</strong> <code>code {number}</code> 键码</p><p><strong>返回：</strong> <code>{boolean}</code></p><p>模拟按键抬起事件。</p><h2 id="keypress-code" tabindex="-1">keyPress(code) <a class="header-anchor" href="#keypress-code" aria-label="Permalink to “keyPress(code)”">​</a></h2><p><strong>参数：</strong> <code>code {number}</code> 键码</p><p><strong>返回：</strong> <code>{boolean}</code></p><p>模拟按键按下和抬起事件。</p><h2 id="keypress-code-code" tabindex="-1">keyPress_code(code) <a class="header-anchor" href="#keypress-code-code" aria-label="Permalink to “keyPress_code(code)”">​</a></h2><p><strong>参数：</strong> <code>code {number}</code> 键码</p><p><strong>返回：</strong> <code>{boolean}</code></p><p>模拟特定的按键按下和抬起事件，与keyPress不同。</p><h2 id="keydown-code-code" tabindex="-1">keyDown_code(code) <a class="header-anchor" href="#keydown-code-code" aria-label="Permalink to “keyDown_code(code)”">​</a></h2><p><strong>参数：</strong> <code>code {number}</code> 键码</p><p><strong>返回：</strong> <code>{boolean}</code></p><p>模拟特定的按键按下事件，与keyDown不同。</p><h2 id="keyup-code-code" tabindex="-1">keyUp_code(code) <a class="header-anchor" href="#keyup-code-code" aria-label="Permalink to “keyUp_code(code)”">​</a></h2><p><strong>参数：</strong> <code>code {number}</code> 键码</p><p><strong>返回：</strong> <code>{boolean}</code></p><p>模拟特定的按键抬起事件，与keyUp不同。</p><h2 id="keyupall" tabindex="-1">keyUpAll() <a class="header-anchor" href="#keyupall" aria-label="Permalink to “keyUpAll()”">​</a></h2><p><strong>返回：</strong> <code>{boolean}</code></p><p>模拟松开所有按键。</p><h2 id="key-select" tabindex="-1">key_select() <a class="header-anchor" href="#key-select" aria-label="Permalink to “key_select()”">​</a></h2><p><strong>返回：</strong> <code>{boolean}</code></p><p>模拟全选操作。</p><h2 id="key-paste" tabindex="-1">key_paste() <a class="header-anchor" href="#key-paste" aria-label="Permalink to “key_paste()”">​</a></h2><p><strong>返回：</strong> <code>{boolean}</code></p><p>模拟粘贴操作。</p><h2 id="key-copy" tabindex="-1">key_copy() <a class="header-anchor" href="#key-copy" aria-label="Permalink to “key_copy()”">​</a></h2><p><strong>返回：</strong> <code>{boolean}</code></p><p>模拟复制操作。</p><h2 id="key-cat" tabindex="-1">key_cat() <a class="header-anchor" href="#key-cat" aria-label="Permalink to “key_cat()”">​</a></h2><p><strong>返回：</strong> <code>{boolean}</code></p><p>模拟剪切操作。</p><h2 id="key-del" tabindex="-1">key_del() <a class="header-anchor" href="#key-del" aria-label="Permalink to “key_del()”">​</a></h2><p><strong>返回：</strong> <code>{boolean}</code></p><p>模拟退格（删除）操作。</p><h2 id="key-delete" tabindex="-1">key_delete() <a class="header-anchor" href="#key-delete" aria-label="Permalink to “key_delete()”">​</a></h2><p><strong>返回：</strong> <code>{boolean}</code></p><p>模拟删除操作。</p><h2 id="key-enter" tabindex="-1">key_enter() <a class="header-anchor" href="#key-enter" aria-label="Permalink to “key_enter()”">​</a></h2><p><strong>返回：</strong> <code>{boolean}</code></p><p>模拟回车操作。</p><h2 id="key-num-n" tabindex="-1">key_num(n) <a class="header-anchor" href="#key-num-n" aria-label="Permalink to “key_num(n)”">​</a></h2><p><strong>参数：</strong> <code>n {number}</code> 数字（0-9）</p><p><strong>返回：</strong> <code>{boolean}</code></p><p>模拟数字键按下。</p><h2 id="key-abc-n" tabindex="-1">key_abc(n) <a class="header-anchor" href="#key-abc-n" aria-label="Permalink to “key_abc(n)”">​</a></h2><p><strong>参数：</strong> <code>n {char}</code> 字母</p><p><strong>返回：</strong> <code>{boolean}</code></p><p>模拟字母键按下。</p><h2 id="volup" tabindex="-1">volUp() <a class="header-anchor" href="#volup" aria-label="Permalink to “volUp()”">​</a></h2><p><strong>返回：</strong> <code>{boolean}</code></p><p>模拟音量增大操作。</p><h2 id="voldown" tabindex="-1">volDown() <a class="header-anchor" href="#voldown" aria-label="Permalink to “volDown()”">​</a></h2><p><strong>返回：</strong> <code>{boolean}</code></p><p>模拟音量减小操作。</p><h2 id="power" tabindex="-1">power() <a class="header-anchor" href="#power" aria-label="Permalink to “power()”">​</a></h2><p><strong>返回：</strong> <code>{boolean}</code></p><p>模拟按下电源键。</p><h2 id="power-time" tabindex="-1">power(time) <a class="header-anchor" href="#power-time" aria-label="Permalink to “power(time)”">​</a></h2><p><strong>参数：</strong> <code>time {number}</code> 持续时间（毫秒）</p><p><strong>返回：</strong> <code>{boolean}</code></p><p>模拟按住电源键一段时间。</p><h2 id="reboot" tabindex="-1">reboot() <a class="header-anchor" href="#reboot" aria-label="Permalink to “reboot()”">​</a></h2><p><strong>返回：</strong> <code>{boolean}</code></p><p>模拟重启蓝牙主板。</p><h2 id="setxy-x-y" tabindex="-1">setXY(x, y) <a class="header-anchor" href="#setxy-x-y" aria-label="Permalink to “setXY(x, y)”">​</a></h2><p><strong>参数：</strong></p><ul><li><code>x {number}</code> X坐标</li><li><code>y {number}</code> Y坐标</li></ul><p><strong>返回：</strong> <code>{boolean}</code></p><p>设置分辨率。</p><h2 id="reg-key" tabindex="-1">reg(key) <a class="header-anchor" href="#reg-key" aria-label="Permalink to “reg(key)”">​</a></h2><p><strong>参数：</strong> <code>key {string}</code> 注册密钥</p><p><strong>返回：</strong> <code>{boolean}</code></p><p>注册设备。</p><h2 id="setrnd-x-y" tabindex="-1">setRnd(x, y) <a class="header-anchor" href="#setrnd-x-y" aria-label="Permalink to “setRnd(x, y)”">​</a></h2><p><strong>参数：</strong></p><ul><li><code>x {number}</code> 随机数X</li><li><code>y {number}</code> 随机数Y</li></ul><p><strong>返回：</strong> <code>{boolean}</code></p><p>设置点击延时随机数。</p><h2 id="setbattery-lv" tabindex="-1">setBattery(lv) <a class="header-anchor" href="#setbattery-lv" aria-label="Permalink to “setBattery(lv)”">​</a></h2><p><strong>参数：</strong> <code>lv {number}</code> 电量百分比</p><p><strong>返回：</strong> <code>{boolean}</code></p><p>设置电池电量。</p><h2 id="connect-boolean-autoconnect-int-index" tabindex="-1">connect(boolean autoconnect, int index) <a class="header-anchor" href="#connect-boolean-autoconnect-int-index" aria-label="Permalink to “connect(boolean autoconnect, int index)”">​</a></h2><p><strong>参数：</strong></p><ul><li><code>autoconnect {boolean}</code> 是否自动连接</li><li><code>index {number}</code> 设备索引</li></ul><p><strong>返回：</strong> <code>{boolean}</code></p><p>连接蓝牙设备。</p><h2 id="getconnecteddevices" tabindex="-1">getConnectedDevices() <a class="header-anchor" href="#getconnecteddevices" aria-label="Permalink to “getConnectedDevices()”">​</a></h2><p><strong>返回：</strong> <code>{BluetoothDevice|null}</code></p><p>获取已连接的蓝牙设备。</p><h2 id="getconnectstate" tabindex="-1">getConnectState() <a class="header-anchor" href="#getconnectstate" aria-label="Permalink to “getConnectState()”">​</a></h2><p><strong>返回：</strong> <code>{boolean}</code></p><p>获取当前蓝牙连接状态，true表示已连接。</p><h2 id="senddata-str" tabindex="-1">sendData(str) <a class="header-anchor" href="#senddata-str" aria-label="Permalink to “sendData(str)”">​</a></h2><p><strong>参数：</strong> <code>str {string}</code> 要发送的数据</p><p><strong>返回：</strong> <code>{boolean}</code></p><p>发送数据到蓝牙设备。</p><h2 id="senddataawait-str-time" tabindex="-1">sendDataAwait(str, time) <a class="header-anchor" href="#senddataawait-str-time" aria-label="Permalink to “sendDataAwait(str, time)”">​</a></h2><p><strong>参数：</strong></p><ul><li><code>str {string}</code> 要发送的数据</li><li><code>time {number}</code> 等待时间（毫秒）</li></ul><p><strong>返回：</strong> <code>{boolean}</code></p><p>发送数据并等待响应。</p><h2 id="getdata-time" tabindex="-1">getData(time) <a class="header-anchor" href="#getdata-time" aria-label="Permalink to “getData(time)”">​</a></h2><p><strong>参数：</strong> <code>time {number}</code> 等待时间（毫秒）</p><p><strong>返回：</strong> <code>{string}</code></p><p>获取数据。</p><h2 id="waitfor-time-sleep" tabindex="-1">waitFor(time, sleep) <a class="header-anchor" href="#waitfor-time-sleep" aria-label="Permalink to “waitFor(time, sleep)”">​</a></h2><p><strong>参数：</strong></p><ul><li><code>time {number}</code> 最大等待时间（毫秒）</li><li><code>sleep {number}</code> 检查间隔（毫秒）</li></ul><p><strong>返回：</strong> <code>{String}</code> 数据或超时提示</p><p>等待数据并处理超时。</p><h2 id="waitfor-time" tabindex="-1">waitFor(time) <a class="header-anchor" href="#waitfor-time" aria-label="Permalink to “waitFor(time)”">​</a></h2><p><strong>参数：</strong> <code>time {number}</code> 默认最大等待时间（毫秒）</p><p><strong>返回：</strong> <code>{String}</code> 数据或超时提示</p><p>等待数据并处理超时（默认检查间隔）。</p><h2 id="waitfor" tabindex="-1">waitFor() <a class="header-anchor" href="#waitfor" aria-label="Permalink to “waitFor()”">​</a></h2><p><strong>返回：</strong> <code>{String}</code> 数据或断开连接提示</p><p>持续等待数据直到连接断开或数据可用。</p><h2 id="getdata" tabindex="-1">getData() <a class="header-anchor" href="#getdata" aria-label="Permalink to “getData()”">​</a></h2><p><strong>返回：</strong> <code>{String}</code></p><p>获取最新接收到的数据。</p><h2 id="disconnect" tabindex="-1">disconnect() <a class="header-anchor" href="#disconnect" aria-label="Permalink to “disconnect()”">​</a></h2><p><strong>返回：</strong> <code>{boolean}</code></p><p>断开蓝牙连接。</p>',189)]))}const g=a(i,[["render",r]]);export{b as __pageData,g as default};
