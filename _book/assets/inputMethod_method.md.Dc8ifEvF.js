import{_ as a,c as i,o as e,ag as t}from"./chunks/framework.S-Qvb3wi.js";const c=JSON.parse('{"title":"输入法-Keyboards","description":"DeekeScript - 输入法-Keyboards","frontmatter":{"title":"输入法-Keyboards","description":"DeekeScript - 输入法-Keyboards"},"headers":[],"relativePath":"inputMethod/method.md","filePath":"inputMethod/method.md"}'),n={name:"inputMethod/method.md"};function l(p,s,d,r,h,o){return e(),i("div",null,s[0]||(s[0]=[t(`<h1 id="输入法-keyboards" tabindex="-1">输入法-Keyboards <a class="header-anchor" href="#输入法-keyboards" aria-label="Permalink to &quot;输入法-Keyboards&quot;">​</a></h1><h2 id="输入法的作用" tabindex="-1">输入法的作用 <a class="header-anchor" href="#输入法的作用" aria-label="Permalink to &quot;输入法的作用&quot;">​</a></h2><p>各大平台（如微信、支付宝、抖音、小红书等）通常会检测以下行为，安全性和平台推荐度：</p><table tabindex="0"><thead><tr><th>场景</th><th>推荐输入方式</th></tr></thead><tbody><tr><td>一般文本输入</td><td>✅ <strong>输入法更优</strong></td></tr><tr><td>需要频繁改文本、填表等</td><td>⚠️ 输入法优先，避免用 setText</td></tr><tr><td>自动化模拟输入</td><td>✅ 输入法更隐蔽、更稳定</td></tr><tr><td>被平台反作弊监控的场景</td><td>✅ 输入法更安全</td></tr><tr><td>不可编辑字段或非标准控件</td><td>⚠️ 必须用无障碍</td></tr></tbody></table><p><code>总的来说，输入法输入内容，安全性更高；如果结合hid点击滑动，将会导致平台更难监控软件行为。</code></p><h2 id="caninput" tabindex="-1">canInput() <a class="header-anchor" href="#caninput" aria-label="Permalink to &quot;canInput()&quot;">​</a></h2><p>判断当前输入法是不是默认输入法，如果不是则不能输入</p><blockquote><p>返回 {boolean} 是否可以输入</p></blockquote><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Keyboards.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">canInput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Keyboards.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;文本框新增内容&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="isenabled" tabindex="-1">isEnabled() <a class="header-anchor" href="#isenabled" aria-label="Permalink to &quot;isEnabled()&quot;">​</a></h2><p>判断当前输入法是不是启用</p><blockquote><p>返回 {boolean} 是否启用（注意，输入法启用之后，没有设置为默认输入法，此时不能输入，但是启用状态为true</p></blockquote><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Keyboards.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isEnabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //输入法没有启用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="input-info" tabindex="-1">input(info) <a class="header-anchor" href="#input-info" aria-label="Permalink to &quot;input(info)&quot;">​</a></h2><p>往文本框尾部输入文字（注意输入前，请先确认文本框获取焦点，否则输入失败，但是也会返回true）</p><blockquote><p>info {string} 输入的内容 返回 {boolean} 输入是否成功</p></blockquote><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Keyboards.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;文本框新增内容&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="delete" tabindex="-1">delete() <a class="header-anchor" href="#delete" aria-label="Permalink to &quot;delete()&quot;">​</a></h2><p>删除获取焦点的文本框中的内容</p><blockquote><p>返回 {boolean} 删除指令是否发送成功（注意，文本框内容删除完成之后，此方法依然返回true）</p></blockquote><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Keyboards.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//删除一个字符，如果需要全部删除，可以先获取文本长度，再循环调用delete方法</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,21)]))}const b=a(n,[["render",l]]);export{c as __pageData,b as default};
