import{_ as n,l as t,n as l,q as i,v as s,x as e}from"./chunks/theme.DmEsGR88.js";const g=JSON.parse('{"title":"加解密 Encrypt","description":"DeekeScript - 加解密 Encrypt","frontmatter":{"title":"加解密 Encrypt","description":"DeekeScript - 加解密 Encrypt"},"headers":[],"relativePath":"advance/encryption.md","filePath":"advance/encryption.md"}'),r={name:"advance/encryption.md"};function p(h,a,k,d,c,o){return l(),t("div",null,a[0]||(a[0]=[i('<h1 id="加解密-encrypt" tabindex="-1">加解密 Encrypt <a class="header-anchor" href="#加解密-encrypt" aria-label="Permalink to “加解密 Encrypt”">​</a></h1><p>本模块主要囊括了一些场景的加密方式，和一些编码方式</p><h2 id="md5-str" tabindex="-1">md5(str) <a class="header-anchor" href="#md5-str" aria-label="Permalink to “md5(str)”">​</a></h2><blockquote><p>str {string} 加密前的字符串</p><p>返回 {string} 加密后的字符串</p></blockquote><p>md5加密</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>console.log(Encrypt.md5(&#39;DeekeScript&#39;));//输出：82e431569749c90ab31cfac2a9a3c4c3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="sha1-str" tabindex="-1">sha1(str) <a class="header-anchor" href="#sha1-str" aria-label="Permalink to “sha1(str)”">​</a></h2><blockquote><p>str {string} 加密前的字符串</p><p>返回 {string} 加密后的字符串</p></blockquote><p>sha1加密</p><h2 id="sha256-str" tabindex="-1">sha256(str) <a class="header-anchor" href="#sha256-str" aria-label="Permalink to “sha256(str)”">​</a></h2><blockquote><p>str {string} 加密前的字符串</p><p>返回 {string} 加密后的字符串</p></blockquote><p>sha256加密</p><h2 id="base64encode-str" tabindex="-1">base64Encode(str) <a class="header-anchor" href="#base64encode-str" aria-label="Permalink to “base64Encode(str)”">​</a></h2>',13),s("blockquote",null,[s("p",null,"str {string} 需要编码的字符串"),s("p",{string:""},"返回")],-1),s("p",null,"base64编码字符串",-1),s("h2",{id:"base64decode-str",tabindex:"-1"},[e("base64Decode(str) "),s("a",{class:"header-anchor",href:"#base64decode-str","aria-label":"Permalink to “base64Decode(str)”"},"​")],-1),s("blockquote",null,[s("p",null,"str {string} base64Encode后的字符串"),s("p",{string:""},"返回")],-1),s("p",null,"base64解密后的字符串",-1),s("h2",{id:"aescbcencode-key-iv-str",tabindex:"-1"},[e("aesCbcEncode(key, iv, str) "),s("a",{class:"header-anchor",href:"#aescbcencode-key-iv-str","aria-label":"Permalink to “aesCbcEncode(key, iv, str)”"},"​")],-1),s("blockquote",null,[s("p",{string:""},"key"),s("p",{string:""},"iv"),s("p",null,"str {string} 需要加密的内容"),s("p",null,"返回 {string} 加密后的内容")],-1),i(`<p>采用AES-CBC加密</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iv </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Encrypt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generateIv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;DeekeScript&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> encodeStr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Encrypt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">aesCbcEncode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key, iv, str);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encodeStr);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//输出加密后的内容</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="aescbcdecode-key-iv-encodestr" tabindex="-1">aesCbcDecode(key, iv, encodeStr) <a class="header-anchor" href="#aescbcdecode-key-iv-encodestr" aria-label="Permalink to “aesCbcDecode(key, iv, encodeStr)”">​</a></h2>`,3),s("blockquote",null,[s("p",{string:""},"key"),s("p",{string:""},"iv"),s("p",null,"str {string} 需要被解密的内容"),s("p",null,"返回 {string} 解密后的内容")],-1),i(`<p>采用AES-CBC模式解密</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iv </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Encrypt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generateIv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//替换成实际的iv</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;DeekeScript&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Encrypt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">aesCbcEncode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key, iv, encodeStr);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encodeStr);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//输出加密后的内容</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,2)]))}const b=n(r,[["render",p]]);export{g as __pageData,b as default};
