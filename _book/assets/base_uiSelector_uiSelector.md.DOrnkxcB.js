import{_ as t,l as a,n,q as s}from"./chunks/theme.DmEsGR88.js";const k=JSON.parse('{"title":"选择器 - UiSelector","description":"DeekeScript - 选择器 - UiSelector","frontmatter":{"title":"选择器 - UiSelector","description":"DeekeScript - 选择器 - UiSelector"},"headers":[],"relativePath":"base/uiSelector/uiSelector.md","filePath":"base/uiSelector/uiSelector.md"}'),i={name:"base/uiSelector/uiSelector.md"};function o(c,e,r,l,d,h){return n(),a("div",null,e[0]||(e[0]=[s(`<h1 id="选择器-uiselector" tabindex="-1">选择器 - UiSelector <a class="header-anchor" href="#选择器-uiselector" aria-label="Permalink to “选择器 - UiSelector”">​</a></h1><h2 id="基本介绍" tabindex="-1">基本介绍 <a class="header-anchor" href="#基本介绍" aria-label="Permalink to “基本介绍”">​</a></h2><p>UiSelector 即选择器，用于筛选屏幕上的控件，再对控件进行点击、输入文本内容、长按等动作。这里需要先简单介绍一下控件和界面的相关知识。</p><p>Android中的界面是由一个个控件构成的，例如图片部分是一个图片控件(ImageView)，文字部分是一个文字控件(TextView)；同时，通过各种布局来决定各个控件的位置，例如，线性布局(LinearLayout)里面的控件都是按水平或垂直一次叠放的，列表布局(AbsListView)则是以列表的形式显示控件。</p><p>控件有各种属性，包括文本(text), 描述(desc), 类名(className)，是否可以点击（clickable）, id 等等。我们通常用一个控件的属性来找到这个控件，例如，想要点击某软件聊天窗口的&quot;发送&quot;按钮，我们就可以通过它的文本属性为&quot;发送&quot;来找到这个控件并点击他，具体代码为:</p><blockquote><p>获取控件后，即可对控件进行点击，滑动，输入文本等操作。控件操作请阅读 <strong><a href="./../uiObject/uiObject.html">控件操作</a></strong> 部分</p></blockquote><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//这里的sendButton就是一个控件对象，可以对控件对象进行各种操作</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> simpleMode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 默认UiSelector不带参数，则为简单模式；如果simpleMode为false则为复杂模式（能查看到更多控件，包括系统控件，如：状态栏的WiFi、时间等）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sendButton </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UiSelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(simpleMode).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;发送&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findOne</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//UiSelector(true) 和 UiSelector()是等同的</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sendButton){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sendButton.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="id-name" tabindex="-1">id(name) <a class="header-anchor" href="#id-name" aria-label="Permalink to “id(name)”">​</a></h2><p><strong>参数：</strong> <code>name {string}</code></p><p><strong>返回：</strong> <code>{UiSelector}</code> 返回选择器自身以便链式调用</p><p>为当前选择器附加控件&quot;id 等于字符串 name&quot;的筛选条件。【对应节点选择器中的viewIdResourceName】</p><h2 id="classname-name" tabindex="-1">className(name) <a class="header-anchor" href="#classname-name" aria-label="Permalink to “className(name)”">​</a></h2><p><strong>参数：</strong> <code>name {string}</code></p><p><strong>返回：</strong> <code>{UiSelector}</code> 返回选择器自身以便链式调用</p><p>为当前选择器附加控件&quot;className 等于字符串 name&quot;的筛选条件。</p><h2 id="bounds-left-top-right-bottom" tabindex="-1">bounds(left, top, right, bottom) <a class="header-anchor" href="#bounds-left-top-right-bottom" aria-label="Permalink to “bounds(left, top, right, bottom)”">​</a></h2><p><strong>参数：</strong></p><ul><li><code>left {number}</code> 控件左边缘与屏幕左边的距离</li><li><code>top {number}</code> 上边距</li><li><code>right {number}</code> 右边距</li><li><code>bottom {number}</code> 下边距</li></ul><p><strong>返回：</strong> <code>{UiSelector}</code> 返回选择器自身以便链式调用</p><p>为当前选择器附加控件&quot;bounds范围&quot;的筛选条件。</p><h2 id="text-content" tabindex="-1">text(content) <a class="header-anchor" href="#text-content" aria-label="Permalink to “text(content)”">​</a></h2><p><strong>参数：</strong> <code>content {string}</code></p><p><strong>返回：</strong> <code>{UiSelector}</code> 返回选择器自身以便链式调用</p><p>为当前选择器附加控件&quot;text 等于字符串 content&quot;的筛选条件。</p><h2 id="desc-content" tabindex="-1">desc(content) <a class="header-anchor" href="#desc-content" aria-label="Permalink to “desc(content)”">​</a></h2><p><strong>参数：</strong> <code>content {string}</code></p><p><strong>返回：</strong> <code>{UiSelector}</code> 返回选择器自身以便链式调用</p><p>为当前选择器附加控件&quot;contentDescribe 等于字符串 content&quot;的筛选条件。【对应节点选择器中的contentDescription】</p><h2 id="clickable-canclick" tabindex="-1">clickable(canClick) <a class="header-anchor" href="#clickable-canclick" aria-label="Permalink to “clickable(canClick)”">​</a></h2><p><strong>参数：</strong> <code>canClick {boolean}</code> 是否可以点击</p><p><strong>返回：</strong> <code>{UiSelector}</code> 返回选择器自身以便链式调用</p><p>为当前选择器附加控件&quot;clickable 等于 canClick&quot;的筛选条件。</p><h2 id="selected-isselected" tabindex="-1">selected(isSelected) <a class="header-anchor" href="#selected-isselected" aria-label="Permalink to “selected(isSelected)”">​</a></h2><p><strong>参数：</strong> <code>isSelected {boolean}</code> 是否已选择</p><p><strong>返回：</strong> <code>{UiSelector}</code> 返回选择器自身以便链式调用</p><p>为当前选择器附加控件&quot;selected 等于 isSelected&quot;的筛选条件。</p><h2 id="checked-ischecked" tabindex="-1">checked(isChecked) <a class="header-anchor" href="#checked-ischecked" aria-label="Permalink to “checked(isChecked)”">​</a></h2><p><strong>参数：</strong> <code>isChecked {boolean}</code> 是否被选中</p><p><strong>返回：</strong> <code>{UiSelector}</code> 返回选择器自身以便链式调用</p><p>为当前选择器附加控件&quot;checked 等于字符串 isChecked&quot;的筛选条件。</p><h2 id="enabled-isenabled" tabindex="-1">enabled(isEnabled) <a class="header-anchor" href="#enabled-isenabled" aria-label="Permalink to “enabled(isEnabled)”">​</a></h2><p><strong>参数：</strong> <code>isEnabled {boolean}</code> 是否可以交互（为false的时候表示禁用）</p><p><strong>返回：</strong> <code>{UiSelector}</code> 返回选择器自身以便链式调用</p><p>为当前选择器附加控件&quot;enabled 等于字符串 isEnabled&quot;的筛选条件。</p><h2 id="focusable-canfocus" tabindex="-1">focusable(canFocus) <a class="header-anchor" href="#focusable-canfocus" aria-label="Permalink to “focusable(canFocus)”">​</a></h2><p><strong>参数：</strong> <code>canFocus {boolean}</code> 是否可以获取焦点</p><p><strong>返回：</strong> <code>{UiSelector}</code> 返回选择器自身以便链式调用</p><p>为当前选择器附加控件&quot;focusable 等于 canFocus&quot;的筛选条件。</p><h2 id="scrollable-canscroll" tabindex="-1">scrollable(canScroll) <a class="header-anchor" href="#scrollable-canscroll" aria-label="Permalink to “scrollable(canScroll)”">​</a></h2><p><strong>参数：</strong> <code>canScroll {boolean}</code> 是否可以滚动</p><p><strong>返回：</strong> <code>{UiSelector}</code> 返回选择器自身以便链式调用</p><p>为当前选择器附加控件&quot;scrollable 等于 canScroll&quot;的筛选条件。</p><h2 id="longclickable-canlongclick" tabindex="-1">longClickable(canLongClick) <a class="header-anchor" href="#longclickable-canlongclick" aria-label="Permalink to “longClickable(canLongClick)”">​</a></h2><p><strong>参数：</strong> <code>canLongClick {boolean}</code> 是否可以长按</p><p><strong>返回：</strong> <code>{UiSelector}</code> 返回选择器自身以便链式调用</p><p>为当前选择器附加控件&quot;longClickable 等于 canLongClick&quot;的筛选条件。</p><h2 id="packagename-name" tabindex="-1">packageName(name) <a class="header-anchor" href="#packagename-name" aria-label="Permalink to “packageName(name)”">​</a></h2><p><strong>参数：</strong> <code>name {string}</code></p><p><strong>返回：</strong> <code>{UiSelector}</code> 返回选择器自身以便链式调用</p><p>为当前选择器附加控件&quot;packageName 等于字符串 name&quot;的筛选条件。</p><h2 id="resourceid-name" tabindex="-1">resourceId(name) <a class="header-anchor" href="#resourceid-name" aria-label="Permalink to “resourceId(name)”">​</a></h2><p><strong>参数：</strong> <code>name {string}</code></p><p><strong>返回：</strong> <code>{UiSelector}</code> 返回选择器自身以便链式调用</p><p>为当前选择器附加控件&quot;resourceId 等于字符串 name&quot;的筛选条件。</p><h2 id="textcontains-content" tabindex="-1">textContains(content) <a class="header-anchor" href="#textcontains-content" aria-label="Permalink to “textContains(content)”">​</a></h2><p><strong>参数：</strong> <code>content {string}</code></p><p><strong>返回：</strong> <code>{UiSelector}</code> 返回选择器自身以便链式调用</p><p>为当前选择器附加控件&quot;text 包含字符串 content&quot;的筛选条件。</p><h2 id="textstartswith-content" tabindex="-1">textStartsWith(content) <a class="header-anchor" href="#textstartswith-content" aria-label="Permalink to “textStartsWith(content)”">​</a></h2><p><strong>参数：</strong> <code>content {string}</code></p><p><strong>返回：</strong> <code>{UiSelector}</code> 返回选择器自身以便链式调用</p><p>为当前选择器附加控件&quot;text 以字符串 content 开头&quot;的筛选条件。</p><h2 id="textendswith-content" tabindex="-1">textEndsWith(content) <a class="header-anchor" href="#textendswith-content" aria-label="Permalink to “textEndsWith(content)”">​</a></h2><p><strong>参数：</strong> <code>content {string}</code></p><p><strong>返回：</strong> <code>{UiSelector}</code> 返回选择器自身以便链式调用</p><p>为当前选择器附加控件&quot;text 以字符串 content 结尾&quot;的筛选条件。</p><h2 id="textmatches-content" tabindex="-1">textMatches(content) <a class="header-anchor" href="#textmatches-content" aria-label="Permalink to “textMatches(content)”">​</a></h2><p><strong>参数：</strong> <code>content {string}</code></p><p><strong>返回：</strong> <code>{UiSelector}</code> 返回选择器自身以便链式调用</p><p>为当前选择器附加控件&quot;text 正则匹配 content&quot;的筛选条件。</p><h2 id="desccontains-content" tabindex="-1">descContains(content) <a class="header-anchor" href="#desccontains-content" aria-label="Permalink to “descContains(content)”">​</a></h2><p><strong>参数：</strong> <code>content {string}</code></p><p><strong>返回：</strong> <code>{UiSelector}</code> 返回选择器自身以便链式调用</p><p>为当前选择器附加控件&quot;contentDescribe 包含字符串 content&quot;的筛选条件。</p><h2 id="descstartswith-content" tabindex="-1">descStartsWith(content) <a class="header-anchor" href="#descstartswith-content" aria-label="Permalink to “descStartsWith(content)”">​</a></h2><p><strong>参数：</strong> <code>content {string}</code></p><p><strong>返回：</strong> <code>{UiSelector}</code> 返回选择器自身以便链式调用</p><p>为当前选择器附加控件&quot;contentDescribe 以字符串 content 开头&quot;的筛选条件。</p><h2 id="descendswith-content" tabindex="-1">descEndsWith(content) <a class="header-anchor" href="#descendswith-content" aria-label="Permalink to “descEndsWith(content)”">​</a></h2><p><strong>参数：</strong> <code>content {string}</code></p><p><strong>返回：</strong> <code>{UiSelector}</code> 返回选择器自身以便链式调用</p><p>为当前选择器附加控件&quot;contentDescribe 以字符串 content 结尾&quot;的筛选条件。</p><h2 id="descmatches-content" tabindex="-1">descMatches(content) <a class="header-anchor" href="#descmatches-content" aria-label="Permalink to “descMatches(content)”">​</a></h2><p><strong>参数：</strong> <code>content {string}</code></p><p><strong>返回：</strong> <code>{UiSelector}</code> 返回选择器自身以便链式调用</p><p>为当前选择器附加控件&quot;contentDescribe 正则匹配 content&quot;的筛选条件。</p><h2 id="filter-callback" tabindex="-1">filter(callback) <a class="header-anchor" href="#filter-callback" aria-label="Permalink to “filter(callback)”">​</a></h2><p><strong>参数：</strong> <code>callback {Callable}</code></p><p><strong>返回：</strong> <code>{UiObject[]}</code> 返回控件对象</p><p>对当前查找到的UiObject数组进行过滤，过滤的时候执行callback方法，该方法返回false，则对应的UiObject被过滤掉</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ui </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UiSelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bounds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bounds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().left </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bounds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().top </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//获取左边距大于100px，上边距大于300px的控件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findOne</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="exist" tabindex="-1">exist() <a class="header-anchor" href="#exist" aria-label="Permalink to “exist()”">​</a></h2><p><strong>返回：</strong> <code>{boolean}</code> 返回是否存在</p><p>判断当前选择器是否能匹配到UiObject控件信息。</p><h2 id="waitfindone" tabindex="-1">waitFindOne() <a class="header-anchor" href="#waitfindone" aria-label="Permalink to “waitFindOne()”">​</a></h2><p><strong>返回：</strong> <code>{UiObject}</code> 返回控件对象</p><p>一直阻塞，直到某个控件对象出现在屏幕上</p><h2 id="find" tabindex="-1">find() <a class="header-anchor" href="#find" aria-label="Permalink to “find()”">​</a></h2><p><strong>返回：</strong> <code>{UiObject[]}</code></p><p>获取当前选择器筛选的所有UiObject控件。</p><h2 id="findby-uiselector" tabindex="-1">findBy(uiSelector) <a class="header-anchor" href="#findby-uiselector" aria-label="Permalink to “findBy(uiSelector)”">​</a></h2><p><strong>参数：</strong> <code>uiSelector {UiSelector}</code></p><p><strong>返回：</strong> <code>{UiObject[]}</code></p><p>获取当前选择器筛选的所有UiObject控件（a）中查找符合uiSelector选择器的UiObject；从a集合查找，然后遍历它们的子控件、子控件的子控件，直到a下面的所有控件都被查找一遍才结束。</p><h2 id="findby-timeout" tabindex="-1">findBy(timeout) <a class="header-anchor" href="#findby-timeout" aria-label="Permalink to “findBy(timeout)”">​</a></h2><p><strong>参数：</strong> <code>timeout {int}</code></p><p><strong>返回：</strong> <code>{UiObject[]}</code></p><p>获取当前选择器筛选的所有UiObject控件，如果控件一直没有出现，则最大等待timeout毫秒。</p><h2 id="findone" tabindex="-1">findOne() <a class="header-anchor" href="#findone" aria-label="Permalink to “findOne()”">​</a></h2><p><strong>返回：</strong> <code>{UiObject}</code></p><p>获取当前选择器筛选的第一个UiObject控件。</p><h2 id="findonce" tabindex="-1">findOnce() <a class="header-anchor" href="#findonce" aria-label="Permalink to “findOnce()”">​</a></h2><p><strong>返回：</strong> <code>{UiObject}</code></p><p>获取当前选择器筛选的第一个UiObject控件。</p><h2 id="findone-uiselector" tabindex="-1">findOne(uiSelector) <a class="header-anchor" href="#findone-uiselector" aria-label="Permalink to “findOne(uiSelector)”">​</a></h2><p><strong>参数：</strong> <code>uiSelector {UiSelector}</code></p><p><strong>返回：</strong> <code>{UiObject}</code></p><p>获取当前选择器筛选的第一个UiObject控件（a）中查找符合uiSelector选择器的UiObject；从a集合查找，然后遍历它们的子控件、子控件的子控件，直到a下面的所有控件都被查找一遍才结束。</p><h2 id="findoneby-uiselector" tabindex="-1">findOneBy(uiSelector) <a class="header-anchor" href="#findoneby-uiselector" aria-label="Permalink to “findOneBy(uiSelector)”">​</a></h2><p><strong>参数：</strong> <code>uiSelector {UiSelector}</code></p><p><strong>返回：</strong> <code>{UiObject[]}</code></p><p>与findBy类似，区别是找到一个符合条件的控件，立马返回</p><h2 id="findoneby-timeout" tabindex="-1">findOneBy(timeout) <a class="header-anchor" href="#findoneby-timeout" aria-label="Permalink to “findOneBy(timeout)”">​</a></h2><p><strong>参数：</strong> <code>timeout {int}</code></p><p><strong>返回：</strong> <code>{UiObject[]}</code></p><p>与findBy类似，区别是找到一个符合条件的控件，立马返回</p>`,136)]))}const g=t(i,[["render",o]]);export{k as __pageData,g as default};
