import{_ as s,c as l,o as n,ah as t,j as a,a as e}from"./chunks/framework.BJ6Xb1OP.js";const b=JSON.parse('{"title":"Files","description":"DeekeScript - Files","frontmatter":{"title":"Files","description":"DeekeScript - Files"},"headers":[],"relativePath":"base/files/files.md","filePath":"base/files/files.md"}'),p={name:"base/files/files.md"};function h(o,i,r,d,c,k){return n(),l("div",null,i[0]||(i[0]=[t(`<h1 id="files" tabindex="-1">Files <a class="header-anchor" href="#files" aria-label="Permalink to “Files”">​</a></h1><blockquote><p>这里直接使用Java内置的java.nio.file.Files对象</p></blockquote><p>下面提供了Files模块一些常见的文件处理，包括文件读写、移动、复制、删掉等。</p><blockquote><p>注：可以使用for循环打印出Files的相关方法：</p></blockquote><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>let Files = java.nio.file.Files;</span></span>
<span class="line"><span>for(let i in Files){</span></span>
<span class="line"><span>    console.log(i);</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="isdirectory-path" tabindex="-1">isDirectory(path) <a class="header-anchor" href="#isdirectory-path" aria-label="Permalink to “isDirectory(path)”">​</a></h2>`,6),a("blockquote",null,[a("p",null,"path {Path} 路径"),a("p",{boolean:""},"返回")],-1),t(`<p>返回路径path是否是文件夹。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Files </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.nio.file.Files;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Paths </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.nio.file.Paths;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Files.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Paths.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/sdcard/文件夹/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//返回false</span></span></code></pre></div><h2 id="createfile-path" tabindex="-1">createFile(path) <a class="header-anchor" href="#createfile-path" aria-label="Permalink to “createFile(path)”">​</a></h2>`,3),a("blockquote",null,[a("p",null,"path {Path} 路径"),a("p",{boolean:""},"返回")],-1),a("p",null,"会尝试创建一个新文件，如果文件已经存在，会抛出FileAlreadyExistsException异常",-1),a("h2",{id:"createdirectory-path",tabindex:"-1"},[e("createDirectory(path) "),a("a",{class:"header-anchor",href:"#createdirectory-path","aria-label":"Permalink to “createDirectory(path)”"},"​")],-1),a("blockquote",null,[a("p",null,"path {Path} 路径"),a("p",{boolean:""},"返回")],-1),a("p",null,"会创建一个单独的目录。如果目录的父目录不存在，会抛出 NoSuchFileException，并且如果目录已经存在，它会抛出 FileAlreadyExistsException。",-1),a("h2",{id:"createdirectories-path",tabindex:"-1"},[e("createDirectories(path) "),a("a",{class:"header-anchor",href:"#createdirectories-path","aria-label":"Permalink to “createDirectories(path)”"},"​")],-1),a("blockquote",null,[a("p",null,"path {Path} 路径"),a("p",{boolean:""},"返回")],-1),a("p",null,"会确保目标路径的所有父目录存在。如果父目录不存在，它们会一并创建，而不会抛出异常。 如果目录已经存在，它不会抛出异常。",-1),a("h2",{id:"exists-path",tabindex:"-1"},[e("exists(path) "),a("a",{class:"header-anchor",href:"#exists-path","aria-label":"Permalink to “exists(path)”"},"​")],-1),a("blockquote",null,[a("p",null,"path {Path} 路径"),a("p",{boolean:""},"返回")],-1),a("p",null,"返回在路径path处的文件是否存在。",-1),a("h2",{id:"readalllines-path-encoding-utf-8",tabindex:"-1"},[e('readAllLines(path[, encoding = "utf-8"]) '),a("a",{class:"header-anchor",href:"#readalllines-path-encoding-utf-8","aria-label":'Permalink to “readAllLines(path[, encoding = "utf-8"])”'},"​")],-1),a("blockquote",null,[a("p",null,"path {Path} 路径"),a("p",null,"encoding {string} 字符编码，可选，默认为utf-8"),a("p",{string:""},"返回")],-1),a("p",null,"读取文本文件path的所有行并返回。如果文件不存在，则抛出异常；文件特别大的情况下，不推荐使用这种方式读取文件",-1),a("h2",{id:"readbytes-path",tabindex:"-1"},[e("readBytes(path) "),a("a",{class:"header-anchor",href:"#readbytes-path","aria-label":"Permalink to “readBytes(path)”"},"​")],-1),a("blockquote",null,[a("p",null,"path {string} 路径"),a("p",{"byte[]":""},"返回")],-1),t(`<p>读取文件path的所有内容并返回一个字节数组。如果文件不存在，则抛出异常。</p><h2 id="write-path-text-encoding-utf-8-openoption-options" tabindex="-1">write(path, text[, encoding = &quot;utf-8&quot;][, OpenOption... options]) <a class="header-anchor" href="#write-path-text-encoding-utf-8-openoption-options" aria-label="Permalink to “write(path, text[, encoding = &quot;utf-8&quot;][, OpenOption... options])”">​</a></h2><blockquote><p>path {Path} 路径</p><p>text {string} 要写入的文本内容</p><p>encoding {string} 字符编码</p><p>options {java.nio.file.StandardOpenOption.CREATE|java.nio.file.StandardOpenOption.APPEND}可选</p></blockquote><p>把text写入到文件path中。如果文件存在则覆盖，不存在则创建。如果需要追加，则options可以设置为java.nio.file.StandardOpenOption.APPEND</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>let Files = java.nio.file.Files;</span></span>
<span class="line"><span>let Paths = java.nio.file.Paths;</span></span>
<span class="line"><span>console.log(Files.write(Paths.get(&quot;/sdcard/文件夹/2.txt&quot;), &quot;DeekeScript&quot;, java.nio.file.StandardOpenOption.APPEND)); //返回false</span></span></code></pre></div><h2 id="write-path-bytes-openoption-options" tabindex="-1">write(path, bytes[, OpenOption... options]) <a class="header-anchor" href="#write-path-bytes-openoption-options" aria-label="Permalink to “write(path, bytes[, OpenOption... options])”">​</a></h2><blockquote><p>path {Path} 路径</p><p>bytes {byte[]} 字节数组，要写入的二进制数据</p><p>options {java.nio.file.StandardOpenOption.CREATE|java.nio.file.StandardOpenOption.APPEND}可选</p></blockquote><p>把bytes写入到文件path中。如果文件存在则覆盖，不存在则创建。</p><h2 id="copy-frompath-topath" tabindex="-1">copy(fromPath, toPath) <a class="header-anchor" href="#copy-frompath-topath" aria-label="Permalink to “copy(fromPath, toPath)”">​</a></h2>`,9),a("blockquote",null,[a("p",null,"fromPath {Path} 要复制的原文件路径"),a("p",null,"toPath {Path} 复制到的文件路径"),a("p",{boolean:""},"返回")],-1),t(`<p>复制文件，返回是否复制成功。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>let Files = java.nio.file.Files;</span></span>
<span class="line"><span>let Paths = java.nio.file.Paths;</span></span>
<span class="line"><span>Files.copy(Paths.get(&quot;/sdcard/1.txt&quot;), Paths.get(&quot;/sdcard/Download/1.txt&quot;));</span></span></code></pre></div><h2 id="move-frompath-topath" tabindex="-1">move(fromPath, toPath) <a class="header-anchor" href="#move-frompath-topath" aria-label="Permalink to “move(fromPath, toPath)”">​</a></h2>`,3),a("blockquote",null,[a("p",null,"fromPath {Path} 要移动的原文件路径"),a("p",null,"toPath {Path} 移动到的文件路径"),a("p",{boolean:""},"返回")],-1),a("p",null,"移动文件，返回是否移动成功",-1),a("h2",{id:"delete-path",tabindex:"-1"},[e("delete(path) "),a("a",{class:"header-anchor",href:"#delete-path","aria-label":"Permalink to “delete(path)”"},"​")],-1),a("blockquote",null,[a("p",null,"path {Path} 路径"),a("p",{boolean:""},"返回")],-1),a("p",null,"删除文件；文件不存在，它会抛出异常。",-1),a("h2",{id:"deleteifexists-path",tabindex:"-1"},[e("deleteIfExists(path) "),a("a",{class:"header-anchor",href:"#deleteifexists-path","aria-label":"Permalink to “deleteIfExists(path)”"},"​")],-1),a("blockquote",null,[a("p",null,"path {string} 路径"),a("p",null,"path {string} 路径"),a("p",{boolean:""},"返回")],-1),a("p",null,"删除文件，如果文件存在",-1),a("h2",{id:"list-path",tabindex:"-1"},[e("list(path) "),a("a",{class:"header-anchor",href:"#list-path","aria-label":"Permalink to “list(path)”"},"​")],-1),a("blockquote",null,[a("p",null,"path {Path} 路径")],-1),a("p",null,"返回path下面的所有文件和文件夹。",-1)]))}const f=s(p,[["render",h]]);export{b as __pageData,f as default};
